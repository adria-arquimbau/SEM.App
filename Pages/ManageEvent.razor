@page "/manage-event/{EventId}"
@attribute [Authorize(Policy = "admin-organizer")]

@using SEM.App.Data
@using SEM.App.Authentication
@using System.Net.Http.Headers

@inject EventsService EventsService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<h3>Manage Event</h3>

@if (myEvent == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading... Please wait</p>
    </div>
}
else
{
    <div class="event">
        <div class="event-content">
            <h1>@myEvent.Name</h1>
            <div class="event-field">
                <b>Description: </b>
                @myEvent.Description
            </div>
            <div class="event-field">
                <b>Location: </b>
                @myEvent.Location
            </div>
            <div class="event-field">
                <b>Max registrations: </b> @myEvent.MaxRegistrations
            </div>
            <div class="event-field">
                <b>Total registrations: </b> @myEvent.TotalRegistrationsQuantity
            </div>
            <div class="event-field">
                <b>Accepted registrations: </b> @myEvent.AcceptedQuantity / @myEvent.MaxRegistrations
            </div>
            <div class="event-field">
                <b>Pre-registered registrations: </b> @myEvent.PreRegisteredQuantity
            </div>
            <div class="event-field">
                <b>Cancelled registrations: </b> @myEvent.CancelledQuantity
            </div>
            <div class="event-field">
                <b>Creation date: </b> @myEvent.CreationDate
            </div>
            <div class="event-field">
                <b>Created by: </b> @myEvent.CreatorNickName
            </div>
            <div class="event-field">
                <b>Registrations: </b> 
                <table class="table table-striped">
                    <thead>
                        <th scope="col">User Name</th>
                        <th scope="col">Role</th>
                        <th scope="col">State</th>
                        <th scope="col">Actions</th>
                        <th scope="col">Remove</th>
                    </thead>
                    @foreach (var registration in myEvent.Registrations)
                    {
                        <tbody>
                            <tr>
                                <td>@registration.UserName</td>
                                <td>@registration.Role</td>
                                @switch (registration.State)
                                {
                                    case RegistrationState.PreRegistered:<td>@PreRegisteredState</td>
                                        break;
                                    case RegistrationState.Cancelled:<td>@CancelledState</td>
                                        break;
                                    case RegistrationState.Accepted:<td>@AcceptedState</td>
                                        break;
                                }
                                @if (registration.State is RegistrationState.Cancelled)
                                {
                                    @if (!RequestingChangeRegistrationState)
                                    {
                                        <td>
                                            <button class="btn btn-success" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Accepted)">Accept</button>
                                            <button class="btn btn-warning" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.PreRegistered)">Pre-register</button>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            
                                            <button class="btn btn-primary" type="button" disabled>
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="sr-only">Changing state...</span>
                                            </button>
                                        </td>
                                    }
                                }
                                @if (registration.State is RegistrationState.PreRegistered)
                                {
                                    @if (!RequestingChangeRegistrationState)
                                    {
                                        <td>
                                            <button class="btn btn-success" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Accepted)">Accept</button>
                                            <button class="btn btn-danger" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Cancelled)">Cancel</button>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <button class="btn btn-primary" type="button" disabled>
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="sr-only">Changing state...</span>
                                            </button>
                                        </td>
                                    }
                                }
                                @if (registration.State == RegistrationState.Accepted)
                                {
                                    @if (!RequestingChangeRegistrationState)
                                    {
                                        <td><button class="btn btn-danger" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Cancelled)">Cancel</button>
                                        <button class="btn btn-warning" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.PreRegistered)">Pre-register</button></td>
                                    }
                                    else
                                    {
                                        <td>
                                            <button class="btn btn-primary" type="button" disabled>
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="sr-only">Changing state...</span>
                                            </button>
                                        </td>
                                    }
                                }
                                @if (!RequestingDeleteRegistration)
                                {
                                    <td><button class="btn btn-danger" @onclick="() => DeleteRegistration(registration.Id)">Delete</button></td>
                                }
                                else
                                {
                                    <td>
                                        <button class="btn btn-danger" type="button" disabled>
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span class="sr-only">Deleating...</span>
                                        </button>
                                    </td>
                                }
                            </tr>
                        </tbody>
                    }
                </table>    
            </div>
            <div class="event-field">
                @if (ErrorMessage)
                {
                    <div class="alert alert-danger" role="alert">
                        Something went wrong. Try it again later.
                    </div>
                }
            </div>
            <div class="event-field">
                <button class="btn btn-primary" @onclick="GoToEvent">Go to event</button>
            </div>
            <div class="event-field">
                @if (!Deleatingrequest)
                {
                    <button class="btn btn-danger" @onclick="() => Delete(myEvent.Id)">Delete event (irreversible changes)</button>
                }
                else
                {
                    <button class="btn btn-danger" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Deleting...</span>
                    </button>
                }
            </div>
            <div class="event-field">
                <button class="btn btn-primary" @onclick="GoBack">Back</button>
            </div>
        </div>
    </div>
}

@code { 
    [Parameter] 
    public string? EventId { get; set; }

    private SportEventOrganizer? myEvent;

    private string PreRegisteredState = "🔔 Pre-registered";
    private string CancelledState = "⛔ Cancelled";
    private string AcceptedState = "✅ Accepted";

    private bool RequestingChangeRegistrationState;
    private bool RequestingDeleteRegistration;
    private bool Deleatingrequest;
    private bool ErrorMessage;  
    
    private string Token = string.Empty;
        private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await GetMyEventAsOrganizer();
        }
        
        await base.OnInitializedAsync();
    }
    
    private async Task ChangeRegistrationStatus(Guid registrationId, RegistrationState state)
    {
        RequestingChangeRegistrationState = true;
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        
        var request = new HttpRequestMessage(HttpMethod.Put, semApiUrl + $"Events/registration/{registrationId}/{state}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = true;
        }
        
        await GetMyEventAsOrganizer();
        RequestingChangeRegistrationState = false;
    }
    
    private async Task Delete(Guid id)
    {
        Deleatingrequest = true;
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        await EventsService.DeleteEvent(id, token);
        GoBack();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/organizer-panel");
    }

    private void GoToEvent()
    {
        Navigation.NavigateTo($"/Event/{EventId}");
    }

    private async Task DeleteRegistration(Guid registrationId)
    {
        RequestingDeleteRegistration = true;
        var request = new HttpRequestMessage(HttpMethod.Delete, semApiUrl +  $"Events/registration/{registrationId}/delete");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = true;
        }
        await GetMyEventAsOrganizer();
        RequestingDeleteRegistration = false;
    }
    
    private async Task GetMyEventAsOrganizer()
    {   
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl +  $"Events/{Guid.Parse(EventId!)}/organizer");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            GoBack();
        }
        myEvent = await response.Content.ReadFromJsonAsync<SportEventOrganizer>();
    }      
}
