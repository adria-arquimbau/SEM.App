@page "/organizer-panel"
@attribute [Authorize(Policy = "admin-organizer")]

@using SEM.App.Data
@using SEM.App.Authentication

@inject AuthenticationStateProvider authenticationStateProvider
@inject EventsService EventService
@inject NavigationManager Navigation

<PageTitle>Organizer Panel</PageTitle>

<div class="organizer-panel-page">
<h1>Organizer Panel</h1>

<button class="btn btn-primary" @onclick="Open">Create Event</button>

<h2>My events:</h2> 

@if (myEvents == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading... Please wait</p>
    </div>
}
else
{
     @foreach (var myEvent in myEvents)
     {
         <div class="event">
             <div class="event-content">
                 <div class="event-field">
                     <div class="event-field">
                         <h2><b>Title: </b> @myEvent.Name</h2>
                     </div>
                     <div class="event-field">
                         <b>Registrations: </b> @myEvent.TotalRegistrationsQuantity / @myEvent.MaxRegistrations
                     </div>
                     <div class="event-field">
                         <b>Creation date: </b> @myEvent.CreationDate
                     </div>
                     <div class="event-field">
                         <button class="btn btn-primary" @onclick="() => Manage(myEvent.Id)">Manage</button>
                     </div>
                 </div>
             </div>
         </div>
     }
} 
</div>

@* Modal Create Event *@

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Event</h5>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="eventName" class="form-label">Event Name</label>
                    <input type="text" class="form-control" id="eventName" required @bind-value="eventName" />
                </div>
                <div class="mb-3">
                    <label for="eventDescription" class="form-label">Event Description</label>
                    <input type="text" class="form-control" id="eventDescription" required @bind-value="eventDescription" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <input type="text" class="form-control" id="location" required @bind-value="location" />
                </div>
                <div class="mb-3">
                    <label for="maxRegistrations" class="form-label">Max number of registrations</label>
                    <input type="number" class="form-control" id="maxRegistrations" required @bind-value="maxRegistrations" />
                </div>
            </div>
            <div class="modal-footer">
                @if (!RequestingCreation)
                {
                    <button type="button" class="btn btn-primary" @onclick="CreateEvent">Create</button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Creating...</span>
                    </button>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
            @if (isCreated.HasValue)
            {
                @if (!isCreated.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-danger" role="alert">
                            Something went wrong
                        </div>
                    </div>
                }
                @if (isCreated.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-success" role="alert">
                            Event Created!
                        </div>
                    </div>
                }
            }
        </div>  
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    private List<SportEventOrganizer>? myEvents;

    protected override async Task OnInitializedAsync()
    {
        await RefreshEvents();  
    }

    private void Manage(Guid eventId)   
    {
        Navigation.NavigateTo($"/manage-event/{eventId}");
    }

    private async Task RefreshEvents()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        myEvents = await EventService.GetMyEventsAsOrganizer(token);
    }
    
    // Modal Create Event
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    
    private bool ShowBackdrop;      
    private bool? isCreated;
    private bool RequestingCreation;
    
    private string eventName = "";      
    private string eventDescription = "";
    private string location = "";
    private int maxRegistrations = 100;
    
    private async Task CreateEvent()
    {
        RequestingCreation = true;
        if (!string.IsNullOrEmpty(eventName) && !string.IsNullOrEmpty(eventDescription))
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            var token = await customAuthStateProvider.GetToken();
            var isCreatedResponse = await EventService.CreateEvent(eventName, eventDescription, location, maxRegistrations, token);

            if (isCreatedResponse)
            {
                isCreated = true;
                await RefreshEvents();
                Close();
            }
            if (!isCreatedResponse)
            {
                isCreated = false;
            }
        }
        RequestingCreation = false;
    }

    private void Open()
    {
        ModalDisplay = "block;";    
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void Close()
    {
        isCreated = null;
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        eventName = "";
        eventDescription = "";
    }
}   
    