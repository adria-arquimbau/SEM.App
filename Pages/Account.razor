@page "/account"
@using SEM.App.Data
@using SEM.App.Authentication
@attribute [Authorize(Roles = "SEM3:SPORT_EVENTS_MANAGEMENT_ADMIN, SEM2:SPORT_EVENTS_MANAGEMENT_ORGANIZER, SEM1:SPORT_EVENTS_MANAGEMENT_USER")]

@inject UsersService UsersService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Account</PageTitle>

<AuthorizeView>
@if (User == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading your user... Please wait</p>
    </div>
}
else
{
	<div class="my-account">
		<div class="my-account-content">
			<h1>Your Account</h1>
			<div class="my-account-field">
				<b>User Name: </b> @User?.UserName
			</div>
			<div class="my-account-field">
				<b>Name: </b> @User?.Name
			</div>
			<div class="my-account-field">
				<b>Second Name: </b> @User?.SecondName
			</div>
			<div class="my-account-field">
				<b>Email: </b> @User?.Email
			</div>
			<div class="my-account-field">
				<b>Address: </b> @User?.Address
			</div>
			<div class="my-account-field">
				<b>City: </b> @User?.City
			</div>
			<div class="my-account-field">
				<b>PostalCode: </b> @User?.PostalCode
			</div>
			<div class="my-account-field">
				<b>Country: </b> @User?.Country
			</div>
			<div class="my-account-field">
				<b>Phone: </b> @User?.Phone
			</div>
			<div class="my-account-field">
				<b>Registration Date: </b> @User?.RegistrationDate
			</div>
			<div class="my-account-field">
				@if (!HaveAllTheInformation)
				{
					<div class="alert alert-warning" role="alert">
						Your user doesn't have all the required information for Register to an event.
					</div>
				}
			</div>
		</div>
	</div>
}
</AuthorizeView>

@code {
	
	private UserDto? User { get; set; }

	private bool HaveAllTheInformation { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
		var token = await customAuthStateProvider.GetToken();
	
		User = await UsersService.GetMyUser(token);

		await base.OnInitializedAsync();
	}
}