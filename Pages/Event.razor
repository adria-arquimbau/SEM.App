@page "/Event/{EventId}"

@using SEM.App.Data
@using SEM.App.Utilities

@inject EventsService EventsService
@inject ILocalStorage LocalStorage
@inject NavigationManager Navigation

<PageTitle>Event @SportEvent?.Name</PageTitle>

@if (SportEvent == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading... Please wait</p>
    </div>
}
else
{
    <div class="event">
        <h1>@SportEvent?.Name</h1>
        <div class="event-content">
            <div class="event-field">
                <b>Description: </b>
                @SportEvent?.Description
            </div>
            <div class="event-field">
                 <b>Registered: </b> @if (IAmRegistered)
                                     {
                                         @TrueCheck
                                     }
                                     else
                                     {
                                         @FalseCheck
                                     }
            </div>
            <div class="event-field">
                <b>Creation date: </b> @SportEvent?.CreationDate
            </div>
            <div class="event-field">
                <b>Created by: </b> @SportEvent?.CreatorNickName
            </div>
            <div class="event-field">
                @if (IAmLoggedIn && !IAmRegistered)
                {
                    @if (!RequestingSignUp)
                    {
                        <button type="button" class="btn btn-success" @onclick="SignUp">Sign up</button>
                    }
                    else
                    {
                        <button class="btn btn-success" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">Signing up...</span>
                        </button>
                    }
                }
                @if (IAmLoggedIn && IAmRegistered)
                {
                    @if (!RequestingUnRegister)
                    {
                        <button type="button" class="btn btn-danger" @onclick="UnRegister">UnRegister</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">UnRegistering...</span>
                        </button>
                    }
                }
                @if (!IAmLoggedIn)
                {
                    <NavLink href="account">
                        <button type="button" class="btn btn-danger">Log In to Sign Up</button>
                    </NavLink>
                }
            </div>
            @if (FailedRegistration)
            {
                <div class="event-field alert alert-danger">
                    @FailedRegistrationMessage
                </div>
            }
            <div class="event-field">
                <button class="btn btn-primary" @onclick="BackToEvents">Go Back to events</button>
            </div>
            </div>
    </div>
}

@code { 
    [CascadingParameter]
    public MainLayout? mainLayout { get; set; }
    [Parameter] 
    public string EventId { get; set; } 
    
    private SportEvent SportEvent { get; set; }
    private string Token { get; set; }
    
    private bool IAmRegistered { get; set; }    
    private bool IAmLoggedIn { get; set; }
    private bool RequestingSignUp { get; set; }
    private bool RequestingUnRegister { get; set; }
    private bool FailedRegistration { get; set; }

    private const string TrueCheck = "✅";
    private const string FalseCheck = "❌";
    private string? FailedRegistrationMessage;

    protected override async Task OnInitializedAsync()
    {   
        Token = await LocalStorage.GetStringAsync("token");
        if (Token != null)
        {
            var iAmRegisteredResponse = await EventsService.IAmRegistered(Guid.Parse(EventId), Token);
            IAmRegistered = iAmRegisteredResponse.Registered;
        }
        SportEvent = await EventsService.GetEvent(Guid.Parse(EventId));
        await base.OnInitializedAsync();
    }

    private void BackToEvents()
    {
        Navigation.NavigateTo($"/Events");
    }

    private async Task SignUp()
    {
        RequestingSignUp = true;
        var response = await EventsService.RegisterToAnEvent(Token,Guid.Parse(EventId));
        if (response.SuccessRegistration)
        {
            var iAmRegisteredResponse = await EventsService.IAmRegistered(Guid.Parse(EventId), Token);
            IAmRegistered = iAmRegisteredResponse.Registered;
            RequestingSignUp = false;
        }
        if (!response.SuccessRegistration)
        {
            FailedRegistration = true;
            FailedRegistrationMessage = response.Message;
            RequestingSignUp = false;
        }
    }
    
    private async Task UnRegister()
    {
        RequestingUnRegister = true;
        var response = await EventsService.UnRegisterToAnEvent(Token,Guid.Parse(EventId));
        if (response == "Unregistered")
        {
            IAmRegistered = false;
        }
        RequestingUnRegister = false;
    }   
}   
