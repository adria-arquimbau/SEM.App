@page "/Event/{EventId}"

@using SEM.App.Data
@using SEM.App.Authentication
@using System.Net.Http.Headers

@inject EventsService EventsService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<PageTitle>Event @SportEvent?.Name</PageTitle>
    
@if (SportEvent == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading... Please wait</p>
    </div>
}
else
{
    <div class="event">
        <div class="event-content">
            <h1>@SportEvent?.Name</h1>
            <div class="event-field">
                <b>Description: </b>
                @SportEvent?.Description
            </div>
            <div class="event-field">
                <b>Location: </b>
                @SportEvent?.Location
            </div>
            <div class="event-field">
                <b>Registrations: </b> @SportEvent?.RegistrationsQuantity / @SportEvent?.MaxRegistrations
            </div>
        <div class="event-field">
            <b>Registration state: </b>
            @if (RegistrationState is RegistrationState.Accepted)
            {
                @AcceptedState
            }
            @if (RegistrationState is RegistrationState.PreRegistered)
            {
                @PreRegisteredState
            }
            @if (RegistrationState is RegistrationState.NonRegistered)
            {
                @NonRegisteredState
            }
            @if (RegistrationState is RegistrationState.Cancelled)
            {
                @CancelledState
            }
        </div>
            <div class="event-field">
            <b>Creation date: </b> @SportEvent?.CreationDate
        </div>
        <div class="event-field">
            <b>Created by: </b> @SportEvent?.CreatorNickName
        </div>
        <AuthorizeView>
            <div class="event-field">
                <RadzenAccordion>
                    <Items>
                        <RadzenAccordionItem Text="Registered users" Icon="list">
                            @if (!RequestingRegistrations)
                            {
                                var count = 1;
                                @foreach (var registration in Registrations)
                                {
                                    <div class="registered-user">
                                        <div class="registered-user-name">@count. @registration.UserName</div>
                                        <div style="width: 10px;"></div>
                                        <div class="registered-user-role">@registration.Role</div>
                                    </div>
                                    count++;
                                }
                            }
                            else
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Loading registrations...</span>
                            }
                        </RadzenAccordionItem>
                    </Items>
                </RadzenAccordion>
            </div>
                </AuthorizeView>
            <div class="event-field">
                <AuthorizeView>
                    @if (RegistrationState == RegistrationState.NonRegistered)
                    {
                        @if (!RequestingSignUp)
                        {
                            <button type="button" class="btn btn-success" @onclick="SignUp">Sign up</button>
                        }
                        else
                        {
                            <button class="btn btn-success" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Signing up...</span>
                            </button>
                        }
                    }
                </AuthorizeView>
            </div>
            <div class="event-field">
                @if(RegistrationState == RegistrationState.PreRegistered)
                {
                    <div class="alert alert-warning" role="alert">
                        You're pre-registered. Now an organizer have to confirm your registration.
                    </div>
                }
                @if(RegistrationState == RegistrationState.Cancelled)
                {
                    <div class="alert alert-danger" role="alert">
                        You're registration was cancelled. Talk with the organizer.
                    </div>
                }
            </div>
        @if (FailedRegistration)
        {
            <div class="event-field alert alert-danger">
                @FailedRegistrationMessage
            </div>
        }

        <AuthorizeView Policy="admin-organizer">
            <div class="event-field">
                <button class="btn btn-primary" @onclick="ManageEvent">Manage event</button>
            </div>
        </AuthorizeView>
        <div class="event-field">
            <button class="btn btn-primary" @onclick="BackToEvents">Go Back to events</button>
        </div>
        </div>
    </div>
}

@code { 
    [Parameter] 
    public string? EventId { get; set; }    
    
    private SportEvent? SportEvent { get; set; }
    private List<RegistrationDto>? Registrations { get; set; }

    private RegistrationState RegistrationState { get; set; }
    private bool RequestingSignUp { get; set; }
    private bool RequestingRegistrations { get; set; }
    private bool FailedRegistration { get; set; }
        
    private const string AcceptedState = "✅";
    private const string NonRegisteredState = "❌";
    private const string PreRegisteredState = "🔔";
    private const string CancelledState = "⛔";
    private string? FailedRegistrationMessage;  

    private string Token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await SetRegisteredState();
            await GetRegistrations();
        }
        SportEvent = await EventsService.GetEvent(Guid.Parse(EventId!));
        await base.OnInitializedAsync();
    }

    private void BackToEvents()
    {
        Navigation.NavigateTo($"/Events");
    }

    private async Task SignUp()
    {
        RequestingSignUp = true;

        var response = await EventsService.RegisterToAnEvent(Token,Guid.Parse(EventId!));
        if (response.SuccessRegistration)
        {
            SportEvent = await EventsService.GetEvent(Guid.Parse(EventId!));
            await SetRegisteredState();
            await GetRegistrations();
            RequestingSignUp = false;
        }
        if (!response.SuccessRegistration)
        {
            FailedRegistration = true;
            FailedRegistrationMessage = response.Message;
            RequestingSignUp = false;
        }
    }

    private async Task SetRegisteredState()
    {
        var iAmRegisteredResponse = await EventsService.IAmRegistered(Guid.Parse(EventId!), Token);
        RegistrationState = iAmRegisteredResponse.RegistrationState;
    }

    private async Task GetRegistrations()
    {
        RequestingRegistrations = true;
        var registrations = await EventsService.GetAcceptedRegistrationsByEventId(Guid.Parse(EventId!), Token);
        Registrations = registrations;
        RequestingRegistrations = false;
    }
    
    private void ManageEvent()
    {
        Navigation.NavigateTo($"/manage-event/{EventId}");
    }
}   
