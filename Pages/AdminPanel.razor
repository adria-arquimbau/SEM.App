@page "/admin-panel"
@attribute [Authorize(Policy = "admin")]

@using SEM.App.Data
@using SEM.App.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject UsersService UsersService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Admin Panel</PageTitle>

<div class="admin-panel-page">
    <h1>Admin Panel</h1> 

    @if (users == null)
    {
        <div class="loading-page">
            <div class="spinner-border loading-spinner" role="status"></div>
            <p>Loading active users in the application... Please wait</p>
        </div>
    } 
    else
    {
        <h2>Users</h2>
        @foreach (var user in users)
        {
            <div class="user">
                <div class="user-content">
                    <div class="user-field">
                        <b>User Name: </b> @user.UserName                     
                    </div>
                    <div class="user-field">
                        <b>Name: </b> @user.Name                                            
                    </div>
                    <div class="user-field">
                        <b>Email: </b> @user.Email                                            
                    </div>
                    <div class="user-field">
                        <b>Confirmed email: </b>
                        @if (user.EmailConfirmed)
                        {
                            @TrueCheck
                        }
                        else
                        {
                            @FalseCheck
                        }
                    </div>
                    <div class="user-field">
                        <b>Registration date: </b> @user.RegistrationDate                                            
                    </div>
                    <div class="user-field">
                        <b>Last login time: </b> @user.LastLoginTime                                            
                    </div>
                    <div class="user-field">
                        @if (!user.EmailConfirmed)
                        {
                            <button class="btn btn-info" @onclick="() => ConfirmEmail(user.Id)">Confirm Email</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>


@code
{
    private List<UserDto>? users;
    
    private const string TrueCheck = "✅";
    private const string FalseCheck = "❌";

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await base.OnInitializedAsync();
    }

    private async Task ConfirmEmail(Guid userId)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        await UsersService.ConfirmEmail(token, userId);
        await GetUsers();
    }
    
    private async Task GetUsers()
    {   
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        users = await UsersService.GetUsers(token);
    }
}
