@page "/Register"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject HttpClient httpClient
@inject NavigationManager navManager

<div class="register-page">
    <div class="register">
        <div class="register-content">
            <div class="register-field text-center">
                <h3>REGISTER</h3>
            </div>
            <div class="register-field">
                <label>User name</label>
                <input @bind="registerRequest.UserName" type="text" class="form-control" placeholder="UserName"/>
            </div>
            <div class="register-field">
                <label>Email</label>
                <input @bind="registerRequest.Email" class="form-control" placeholder="Email"/>
            </div>
            <div class="register-field">
                <label>Password / Must have: upper case / lower case / one symbol / one number / min 6 characters</label>
                <input @bind="registerRequest.Password" type="password" class="form-control" placeholder="Password"/>
            </div>
            <div class="register-field">
                <label>Repeat password</label>
                <input @bind="repeatPassword" type="password" class="form-control" placeholder="RepeatPassword"/>
            </div>
            <div class="register-field">
                @if (!RequestingRegister)
                {
                    <button @onclick="Registration" class="btn btn-primary">Register</button>
                }
                else
                {
                    <button class="btn btn-success" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Registering..</span>
                    </button>
                }
            </div>
            <div class="register-field">
                @if (FailedRegisterMessage != null)
                {
                    <div class="event-field alert alert-danger">
                        @FailedRegisterMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    private string repeatPassword = string.Empty;
    private string? FailedRegisterMessage;
    
    private bool RequestingRegister;

    private async Task Registration()
    {
        if (!RegisterValidations()) return;
        RequestingRegister = true;
        var loginResponse = await httpClient.PostAsJsonAsync<RegisterRequest>(semApiUrl + "Auth/Register", registerRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/", true);
        }
        else
        {   
            RequestingRegister = false;
            FailedRegisterMessage = "Something went wrong, try it again later";
            //ALERT
        }
        RequestingRegister = false;
    }

    private bool RegisterValidations()
    {
        if (string.IsNullOrWhiteSpace(registerRequest.Email) || string.IsNullOrWhiteSpace(registerRequest.UserName) 
            || string.IsNullOrWhiteSpace(registerRequest.Password) || string.IsNullOrWhiteSpace(repeatPassword))
        {
            FailedRegisterMessage = "You must fill all the fields";
            return false;
        }
        
        if (repeatPassword != registerRequest.Password)
        {
            FailedRegisterMessage = "Not equal passwords";
            return false;
        }

        return true;
    }

    public class RegisterRequest    
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string UserName { get; set; }
    }
}