@using SEM.App.Authentication
@using SEM.App.Data
@using ToastPosition = Blazored.Toast.Configuration.ToastPosition

@inherits LayoutComponentBase

@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient

<PageTitle>Sport Event Manager</PageTitle>
	
@if (ErrorMessage == null)
{
	<div class="page">
		<NavMenu />
		<main>
			<AuthorizeView>
				<Authorized>
					<div class="login-register-container">
						<a class="logout-button" @onclick="Logout" href="javascript:void(0)">Logout</a>
					</div>
				</Authorized>
				<NotAuthorized>
					<div class="login-register-container">
						<a class="login-button" href="/login">Login</a>
						<a class="register-button" href="/register">Register</a>
					</div>
				</NotAuthorized>
			</AuthorizeView>
			
			<article>
				@Body
			</article>
		</main>
	</div>
}
@if (ErrorMessage != null)
{
	<div class="alert alert-warning" role="alert">
		@ErrorMessage
	</div>
}
<BlazoredToasts Timeout="3" ShowCloseButton="false" ShowProgressBar="true" Position="ToastPosition.TopRight" RemoveToastsOnNavigation="true"/>

@code {
	private string? ErrorMessage;
	
	protected override async Task OnInitializedAsync()
	{
		var response = await HttpClient.GetAsync(ApiService.GetBaseUrl() + "hc");
		if (!response.IsSuccessStatusCode)
		{
			ErrorMessage = Messages.MainServicesNotAvailable;
		}
	}

	private async Task Logout()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider) authenticationStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(null);
	}
}
