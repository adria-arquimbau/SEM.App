@using System.Net.Http.Headers
@using SEM.App.Authentication
@using SEM.App.Data
@using SEM.App.Data.Models

@inject HttpClient HttpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation

<h3>Last news</h3>

@if (News == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading... Please wait</p>
    </div>
}
else
{
    @foreach (var news in News)
    {
        <div class="news">
            <div class="news-content">
                <h1>@news.Title</h1> 
                <div class="news-field">
                    @news.CreationDate.ToLongDateString()
                </div>
                <div class="news-field">
                    Author: @news.AuthorName
                </div>
                <div class="news-field">
                    @news.Description
                </div>
                <div class="news-field">
                    <button type="button" class="btn btn-primary btn-sm btn-sm" @onclick="() => GoToEvent(news.EventId)">Go to event</button>
                </div>
            </div>
        </div>
    }
}

@code {

    private List<GetNewsDto>? News;
        private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl +  $"News");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.SendAsync(request);
        News = await response.Content.ReadFromJsonAsync<List<GetNewsDto>>();
        
        await base.OnInitializedAsync();
    }
    
    private void GoToEvent(Guid eventId)
    {   
        Navigation.NavigateTo($"/Event/{eventId}");
    }

}