@using SEM.App.Data
@using SEM.App.Authentication
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json

@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JS

<div class="registrationManager">
    <div class="registrationManager-top">
        <h3>Registrations Manager</h3>
        <button class="btn btn-outline-dark btn-sm" @onclick="DownloadCsv">Download Csv</button>
    </div>
    <table class="table table-striped">
        <thead>
        <th scope="col">User Name</th>
        <th scope="col">Bib</th>
        <th scope="col">Role</th>
        <th scope="col">State</th>
        <th scope="col">Remove</th>
        </thead>
        @foreach (var registration in Registrations)
        {
            <tbody>
            <tr>
                <td>@registration.UserName</td>
                <td>
                    @if (registration.Bib != null)
                    {
                        @if (!registration.RequestingUpdateBib)
                        {
                            <input class="form-control-bib" type="number" @bind="registration.Bib" @bind:event="oninput" @onchange="() => Update(registration)">
                        }
                        else
                        {
                            <input class="form-control-bib" type="number" placeholder="...">
                        }
                    }
                </td>
                <td>@registration.Role</td>
                <td >
                    <div class="state-column">
                        <EditForm Model="@registration.State">
                            <InputSelect ValueExpression="@(() => registration.State)" Value="@registration.State" ValueChanged="@((RegistrationState value) => ChangeRegistrationStatus(registration, value))">
                                @if(!registration.RequestingChangeStatus)
                                {
                                    <option value="@registration.State">@GiveStateIcon(@registration.State) @registration.State</option>
                                    @if (registration.State is RegistrationState.Cancelled)
                                    {
                                        <option value="@RegistrationState.Accepted">Accept</option>
                                        <option value="@RegistrationState.PreRegistered">Pre-register</option>
                                    }
                                    @if (registration.State is RegistrationState.PreRegistered)
                                    {
                                        <option value="@RegistrationState.Accepted">Accept</option>
                                        <option value="@RegistrationState.Cancelled">Cancel</option>
                                    }
                                    @if (registration.State is RegistrationState.Accepted)
                                    {
                                        <option value="@RegistrationState.Cancelled">Cancel</option>
                                        <option value="@RegistrationState.PreRegistered">Pre-register</option>
                                    }
                                }
                                else
                                {
                                    <option value="@registration.State">Updating ...</option>
                                }
                            </InputSelect>
                        </EditForm>
                    </div>
                </td>
                <td>
                    <button class="btn btn-outline-dark btn-sm" @onclick="() => OpenDialog(registration.Id, registration.UserName)">Delete</button>
                </td>
            </tr>
            </tbody>
        }
    </table>
</div>

@if (DialogDeleteRegistrationIsOpen)
{
    <Dialog Caption="Delete an author"
            RequestingDeleteRegistration="@RequestingDeleteRegistration"
            Message="@message"
            OnClose="@OnDeleteRegistrationDialogClose"
            Type="Dialog.Category.DeleteNot">
    </Dialog>
}

@code {

    [Parameter]
    public List<RegistrationDto>? Registrations { get; set; }
    [Parameter]
    public Guid? EventId { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }
    
    private EditContext? editContext;   
    
    private string PreRegisteredState = "🔔  ";
    private string CancelledState = "⛔  ";
    private string AcceptedState = "✅  ";
    
    private Guid registrationIdToDelete;
    
    private bool DialogDeleteRegistrationIsOpen;
    private bool RequestingDeleteRegistration;  
    private bool ErrorMessage;
    
    private string message;
    private string Token;

    protected override Task OnInitializedAsync()
    {
        editContext = new EditContext(Registrations);
        return base.OnInitializedAsync();
    }

    private async Task ChangeRegistrationStatus(RegistrationDto registration, RegistrationState state)
    {
        registration.RequestingChangeStatus = true;   

        var request = new HttpRequestMessage(HttpMethod.Put, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{registration.Id}/{state}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
        var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            
        }

        await RefreshEvent.InvokeAsync();
        registration.RequestingChangeStatus = false;
    }
    
    private async Task Update(RegistrationDto registration)
    {
        registration.RequestingUpdateBib = true;
        var jsonInString = JsonSerializer.Serialize(new
        {       
            registration.Id,
            registration.Bib
        });   
        
        var request = new HttpRequestMessage(HttpMethod.Put, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{registration.Id}")
        {
            Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
        var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            
        }
        registration.RequestingUpdateBib = false;
        await RefreshEvent.InvokeAsync();
    }

    private async Task OnDeleteRegistrationDialogClose(bool isOk)
    {
        if (isOk)
        {
            RequestingDeleteRegistration = true;
            var request = new HttpRequestMessage(HttpMethod.Delete, "https://sport-management-api.azurewebsites.net/api/" +  $"Registrations/{registrationIdToDelete}/delete");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
            var response = await HttpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = true;
                // ficar missatge de error 
            }
            await RefreshEvent.InvokeAsync();
            RequestingDeleteRegistration = false;
        }
        DialogDeleteRegistrationIsOpen = false;
    }
    
    private void OpenDialog(Guid id, string userName)
    {
        DialogDeleteRegistrationIsOpen = true;
        registrationIdToDelete = id;
        message = $"Do you want to delete the {userName} registration?";
    }
    
    private async Task<string> GetToken()
    {   
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        return await customAuthStateProvider.GetToken();
    }

    private string GiveStateIcon(RegistrationState registrationState)
    {
        if (registrationState == RegistrationState.Accepted)
        {
            return AcceptedState;
        }
        if (registrationState == RegistrationState.PreRegistered)
        {
            return PreRegisteredState;
        }
        return CancelledState;
    }
    
    private async Task DownloadCsv()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://sport-management-api.azurewebsites.net/api/Events/" + $"{EventId}/export-registrations");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
        var response = await HttpClient.SendAsync(request);
        var file = await response.Content.ReadAsByteArrayAsync();
        
        var fileStream1 = new MemoryStream(file);
        var fileStream = (Stream)fileStream1;
        var fileName = $"registrations-{EventId}.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
