@using SEM.App.Data
@using SEM.App.Authentication
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json

@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient

<div class="registrationManager">
    <div class="registrationManager-top">
        <h3>Registrations Manager</h3>
        <button class="btn btn-outline-dark btn-sm">Download Csv</button>
    </div>
    <table class="table table-striped">
        <thead>
        <th scope="col">User Name</th>
        <th scope="col">Bib</th>
        <th scope="col">Role</th>
        <th scope="col">State</th>
        <th scope="col">Actions</th>
        </thead>
        @foreach (var registration in Registrations)
        {
            <tbody>
            <tr>
                <td>@registration.UserName</td>
                <td>
                    @if (registration.Bib != null)
                    {
                        <input type="number" @bind="@registration.Bib" class="form-control-bib" id="bib" @oninput="() => Update(registration)" />
                    }
                </td>
                <td>@registration.Role</td>
                @switch (registration.State)
                {
                    case RegistrationState.PreRegistered:<td>@PreRegisteredState</td>
                        break;
                    case RegistrationState.Cancelled:<td>@CancelledState</td>
                        break;
                    case RegistrationState.Accepted:<td>@AcceptedState</td>
                        break;
                }
                <td>
                @if (registration.State is RegistrationState.Cancelled)
                {
                    @if (!RequestingChangeRegistrationState)
                    {
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Accepted)">Accept</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.PreRegistered)">Pre-register</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => OpenDialog(registration.Id, registration.UserName)">Delete</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Changing state"></LoadingButton>
                    }
                }
                @if (registration.State is RegistrationState.PreRegistered)
                {
                    @if (!RequestingChangeRegistrationState)
                    {
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Accepted)">Accept</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Cancelled)">Cancel</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => OpenDialog(registration.Id, registration.UserName)">Delete</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Changing state"></LoadingButton>
                    }
                }
                @if (registration.State == RegistrationState.Accepted)
                {
                    @if (!RequestingChangeRegistrationState)
                    {
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.Cancelled)">Cancel</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeRegistrationStatus(registration.Id, RegistrationState.PreRegistered)">Pre-register</button>
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => OpenDialog(registration.Id, registration.UserName)">Delete</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Changing state"></LoadingButton>
                    }
                }
                </td>
            </tr>
            </tbody>
        }
    </table>
</div>

@if (DialogDeleteRegistrationIsOpen)
{
    <Dialog Caption="Delete an author"
            RequestingDeleteRegistration="@RequestingDeleteRegistration"
            Message="@message"
            OnClose="@OnDialogClose"
            Type="Dialog.Category.DeleteNot">
    </Dialog>
}

@code {

    [Parameter]
    public List<RegistrationDto>? Registrations { get; set; }
    [Parameter]
    public EventCallback RefreshEvent { get; set; }
    
    private string PreRegisteredState = "🔔 Pre-registered";
    private string CancelledState = "⛔ Cancelled";
    private string AcceptedState = "✅ Accepted";
    
    private Guid registrationIdToDelete;
    
    private bool DialogDeleteRegistrationIsOpen;
    private bool RequestingChangeRegistrationState;
    private bool RequestingDeleteRegistration;  
    private bool ErrorMessage;
    
    private string message;
    private string Token;

    private async Task ChangeRegistrationStatus(Guid registrationId, RegistrationState state)
    {
        RequestingChangeRegistrationState = true;

        var request = new HttpRequestMessage(HttpMethod.Put, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{registrationId}/{state}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
        var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            
        }

        await RefreshEvent.InvokeAsync();
        RequestingChangeRegistrationState = false;
    }
    
    private async Task Update(RegistrationDto registration)
    {   
        var jsonInString = JsonSerializer.Serialize(new
        {       
            registration.Id,
            registration.Bib
        });   
        
        var request = new HttpRequestMessage(HttpMethod.Put, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{registration.Id}")
        {
            Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
        var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            
        }
        await RefreshEvent.InvokeAsync();
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            RequestingDeleteRegistration = true;
            var request = new HttpRequestMessage(HttpMethod.Delete, "https://sport-management-api.azurewebsites.net/api/" +  $"Registrations/{registrationIdToDelete}/delete");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken());
            var response = await HttpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = true;
                // ficar missatge de error 
            }
            await RefreshEvent.InvokeAsync();
            RequestingDeleteRegistration = false;
        }
        DialogDeleteRegistrationIsOpen = false;
    }
    
    private void OpenDialog(Guid id, string userName)
    {
        DialogDeleteRegistrationIsOpen = true;
        registrationIdToDelete = id;
        message = $"Do you want to delete the {userName} registration?";
    }
    
    private async Task<string> GetToken()
    {   
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        return await customAuthStateProvider.GetToken();
    }
}