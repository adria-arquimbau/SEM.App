@using SEM.App.Authentication
@using System.Text
@using System.Net.Http.Headers
@using System.Text.Json
@using SEM.App.Data
@using SEM.App.Data.Models

@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <h4 class="modal-title">Add Manager</h4>
         </div>
         <div class="modal-body">
            <div class="mb-3">
               <p>User name</p>
               <input class="form-control-bib" type="text" @bind="UserSearchName" @bind:event="oninput" @onchange="() => GetUsersByContainingName(UserSearchName)">
            </div>
            <div>
               @if (RequestingUsers)
               {
                  <SimpleLoading></SimpleLoading>
               }
               else
               {
                  @if (Users == null)
                  {
                     <div class="alert alert-warning" role="alert">
                        Search for containg user name.
                     </div>
                  }
                  @if (Users?.Count > 0)
                  {
                     <table class="table table-striped">
                        <thead>
                        <th scope="col">Name</th>
                        <th scope="col">Role to add</th>
                        <th scope="col">Action</th>
                        </thead>
                        @foreach (var user in Users.Where(user => !Managers.Exists(x => x.User.Id == user.Id)))
                        {
                           <tbody>
                           <tr>
                              <td>
                                 @user.UserName
                              </td>
                              <td>
                                 <EditForm Model="user.ManagerRoleToAdd">
                                    <InputSelect ValueExpression="@(() => user.ManagerRoleToAdd)" Value="user.ManagerRoleToAdd" ValueChanged="@((ManagerRole value) => ChangeManagerRoleToAdd(user, value))">
                                         <option value="@ManagerRole.Basic">Basic</option>
                                         <option value="@ManagerRole.CheckIn">Check in</option>
                                         <option value="@ManagerRole.Admin">Admin</option>
                                    </InputSelect>
                                  </EditForm>
                              </td>
                              <td>
                                 @if (!user.Requesting)
                                 {
                                    <button class="btn btn-outline-dark btn-sm" @onclick="@(() => Add(user))">Add</button>
                                 }
                                 else
                                 {
                                    <LoadingButton ButtonType="dark" LoadingText="Adding"></LoadingButton>
                                 }
                                 
                              </td>
                           </tr>
                           </tbody>
                        }
                     </table>
                  }
                  @if (Users?.Count == 0)
                  {
                     <div class="alert alert-warning" role="alert">
                        No users with this search criteria.
                     </div>
                  }
               }
            </div>
         </div>
         <div class="modal-footer">
            <button type="button" class="btn btn-outline-dark btn-sm" @onclick="@Cancel">Go back</button>
         </div>
      </div>
   </div>
</div>

@code {
   [Parameter] public string? EventId { get; set; }
   [Parameter] public List<ManagerDto> Managers { get; set; }
   [Parameter] public EventCallback OnClose { get; set; }   

   private List<UserDto>? Users;
   
   private string ErrorMessage = string.Empty;
   private string UserSearchName = string.Empty;
   private bool RequestingAddManager { get; set; }
   private bool RequestingUsers { get; set; }

   private async Task GetUsersByContainingName(string containingName)
   {
      RequestingUsers = true;
      var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
      var token = await customAuthStateProvider.GetToken();
      
      var jsonInString = JsonSerializer.Serialize(new
      {   
         ContainingName = containingName
      });

      var request = new HttpRequestMessage(HttpMethod.Post, "https://sport-management-api.azurewebsites.net/api/" +  "Users")
      {
         Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
      };
      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
      var response = await HttpClient.SendAsync(request);
      if (response.IsSuccessStatusCode)
      {
         Users = await response.Content.ReadFromJsonAsync<List<UserDto>>();
      }
      else
      {
         ErrorMessage = "Something went wrong. Please try again later.";
      }
      RequestingUsers = false;
   }

   private void Cancel()
   {        
      OnClose.InvokeAsync();  
   }  
            
   private async Task Add(UserDto user)
   {  
      user.Requesting = true;
      var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
      var token = await customAuthStateProvider.GetToken();
     
      var jsonInString = JsonSerializer.Serialize(new
      {
         Role = user.ManagerRoleToAdd.ToString()
      });
      var request = new HttpRequestMessage(HttpMethod.Post, "https://sport-management-api.azurewebsites.net/api/" + $"Managers/Event/{EventId}/Add/{user.Id}/Role/{user.ManagerRoleToAdd}")
      {
         Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
      };
      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
      var response = await HttpClient.SendAsync(request);
      if (response.IsSuccessStatusCode)
      {
         await OnClose.InvokeAsync();  
      }
      else
      {
         ErrorMessage = "Something went wrong. Please try again later.";
      }
      user.Requesting = false;
   }

   private void ChangeManagerRoleToAdd(UserDto user, ManagerRole value)
   {
      user.ManagerRoleToAdd = value;
   }
   
}