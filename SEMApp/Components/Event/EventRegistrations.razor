@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Authentication
@using System.Net.Http.Headers

@inject EventsService EventsService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<div class="eventRegistrations">
    <h4>Registrations</h4>
    <div class="eventRegistrations-info">
        <div>
            @if (SportEvent.OpenRegistrationsDateTime < DateTime.Now && SportEvent.CloseRegistrationsDateTime > DateTime.Now)
            {
                @OpenedRegistrations
            }
            else
            {
                @ClosedRegistrations
            }
        </div>
        <div>
            <b>Open:</b> @SportEvent.OpenRegistrationsDateTime.ToLongDateString() at @SportEvent.OpenRegistrationsDateTime.ToShortTimeString()
        </div>
        <div>
            <b>Close:</b> @SportEvent.CloseRegistrationsDateTime.ToLongDateString() at @SportEvent.CloseRegistrationsDateTime.ToShortTimeString()
        </div>
        <div>
            <b>Registrations: </b> @SportEvent.RegistrationsQuantity / @SportEvent.MaxRegistrations
        </div>
    </div>

    <div class="eventRegistrations-state">
        <div class="eventRegistrations-separator"></div>
        <h5>My registration state</h5>
        <AuthorizeView>
            <Authorized>
                @if (RegistrationState.HasValue)
                {
                    <div class="event-field">
                        <b>State: </b>
                        @if (RegistrationState is Data.RegistrationState.Accepted) @AcceptedState
                        @if (RegistrationState is Data.RegistrationState.PreRegistered) @PreRegisteredState
                        @if (RegistrationState is Data.RegistrationState.NonRegistered) @NonRegisteredState
                        @if (RegistrationState is Data.RegistrationState.Cancelled) @CancelledState
                    </div>
                    <div class="event-field">
                        @if (RegistrationState == Data.RegistrationState.PreRegistered)
                        {
                            <div class="alert alert-warning" role="alert">
                                You're pre-registered. Now an organizer have to confirm your registration.
                            </div>
                        }
                        @if (RegistrationState == Data.RegistrationState.Cancelled)
                        {
                            <div class="alert alert-danger" role="alert">
                                You're registration was cancelled. Talk with the organizer.
                            </div>
                        }
                    </div>
                    @if (FailedRegistration)
                    {
                        <div class="alert alert-warning" role="alert">
                            @FailedRegistrationMessage @TwoEmptySpaces
                            @if (FailedRegistrationMessage!.Contains("not the minimum information"))
                            {
                                @if (!RequestingGoToMyAccount)
                                {
                                    <button type="button" class="btn btn-outline-dark btn-sm" @onclick="GoToMyAccount">Set information in my account</button>
                                }
                                else
                                {
                                    <LoadingButton ButtonType="primary" LoadingText="Going to my account"></LoadingButton>
                                }
                            }
                        </div>
                    }
                    <div class="event-field">

                        @if (RegistrationState == Data.RegistrationState.NonRegistered && SportEvent?.OpenRegistrationsDateTime < DateTime.Now && SportEvent.CloseRegistrationsDateTime > DateTime.Now)
                        {
                            @if (!RequestingSignUp)
                            {
                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="SignUp">Sign up</button>
                            }
                            else
                            {
                                <LoadingButton ButtonType="dark" LoadingText="Signing up"></LoadingButton>
                            }
                        }

                    </div>
                }
                else
                {
                    <SimpleLoading></SimpleLoading>
                }
            </Authorized>
            <NotAuthorized>
                <div class="alert alert-warning" role="alert">
                    You must login to register for this event.
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="eventRegistrations-registrations">
        <div class="eventRegistrations-separator"></div>
        <h5>Registrations list</h5>
        <AuthorizeView>
            <Authorized>
                @if (Registrations is {Count: > 0 })
                {
                    <table class="table table-striped">
                        <thead>
                        <th scope="col">Num</th>
                        <th scope="col">User Name</th>
                        <th scope="col">Role</th>
                        <th scope="col">Bib</th>
                        </thead>
                        @for (var index = 0; index < Registrations?.Count; index++)
                        {
                            var registration = Registrations[index];
                            var registrationNumber = index + 1;
                            <tbody>
                            <tr>
                                <td>@registrationNumber</td>
                                <td>@registration.UserName</td>
                                <td>@registration.Role</td>
                                <td>@registration.Bib</td>
                            </tr>
                            </tbody>
                        }
                    </table>
                }
                @if (Registrations is { Count: 0 })
                {
                    <p>No registrations yet.</p>
                }
                @if (Registrations == null)
                {
                    <SimpleLoading></SimpleLoading>
                }
            </Authorized>
            <NotAuthorized>
                <table class="table table-striped">
                    <thead>
                    <th scope="col">Num</th>
                    <th scope="col">User Name</th>
                    <th scope="col">Role</th>
                    <th scope="col">Bib</th>
                    </thead>
                </table>
                <div class="alert alert-warning" role="alert">
                    You must Log in to see the registrations of this event.
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    @if (ErrorMessage != null)
    {
        <div class="alert alert-warning" role="alert">
            @ErrorMessage
        </div>
    }
</div>


@code {
    [Parameter]
    public SportEvent? SportEvent { get; set; }
    private List<RegistrationDto>? Registrations { get; set; }
    
    private RegistrationState? RegistrationState;
        
    private bool RequestingSignUp { get; set; }
    private bool FailedRegistration { get; set; }
    private bool RequestingGoToMyAccount { get; set; }  
    private bool RequestingRegistrations { get; set; }
    private bool RequestingRegistrationState { get; set; }
    
    private string? FailedRegistrationMessage;
    private string? ErrorMessage;
    private const string TwoEmptySpaces = " ";

    private static readonly string semApiUrl = ApiService.GetBaseApiCallUrl();
    private string Token = string.Empty;
    
    private const string AcceptedState = "‚úÖ Accepted";
    private const string NonRegisteredState = "‚ùå Non registered";
    private const string PreRegisteredState = "üîî Pre-registered";
    private const string CancelledState = "‚õî Cancelled";
    private const string ClosedRegistrations = "‚õî Registrations closed";
    private const string OpenedRegistrations = "‚úÖ Registrations open";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await GetRegisteredState();
            await GetRegistrations();
        }
        await base.OnInitializedAsync();
    }

    private async Task SignUp()
    {
        RequestingSignUp = true;

        var response = await EventsService.RegisterToAnEvent(Token, SportEvent.Id);
        if (response.SuccessRegistration)
        {
            SportEvent = await EventsService.GetEvent(SportEvent.Id);
            await GetRegisteredState();
            await GetRegistrations();
            RequestingSignUp = false;
        }
        if (!response.SuccessRegistration)
        {
            FailedRegistration = true;
            FailedRegistrationMessage = response.Message;
            RequestingSignUp = false;
        }
    }
    
    private async Task GetRegisteredState()
    {
        RequestingRegistrationState = true;
        
        var request = new HttpRequestMessage(HttpMethod.Get, ApiService.GetBaseApiCallUrl() + $"Events/{SportEvent.Id}/user-registered");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<IAmRegisteredResponse>();
            RegistrationState = content?.RegistrationState;
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }

        RequestingRegistrationState = false;
    }
    
    private async Task GetRegistrations()
    {
        RequestingRegistrations = true;
        
        var request = new HttpRequestMessage(HttpMethod.Get, ApiService.GetBaseApiCallUrl() + $"Events/{SportEvent.Id}/accepted-registrations");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
            
        var response = await HttpClient.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            Registrations = await response.Content.ReadFromJsonAsync<List<RegistrationDto>>();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }
   
        RequestingRegistrations = false;
    }
    
    private void GoToMyAccount()
    {
        RequestingGoToMyAccount = true;
        Navigation.NavigateTo($"/account");
        RequestingGoToMyAccount = false;
    }
}