@using SEM.App.Authentication
@using SEM.App.Data.Models
@using SEM.App.Components.Loadings
@using System.Net.Http.Headers

@inject HttpClient HttpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation

<div class="eventNews-component">
    <h3 class="eventNews-title">News</h3>
    <div class="eventNews-container">
        @if (News != null)
        {
            @foreach (var news in News)
            {
                <div class="eventNews" @onclick="() => GoToTheNews(news.Id)">
                    <div class="eventNews-top">
                        <div class="eventNews-title">
                            @news.Title
                        </div>
                        <div class="eventNews-date">
                            @news.CreationDate.ToLongDateString()
                        </div>
                    </div>
                    <div class="eventNews-field">
                        @news.ShortDescription
                    </div>
                    <div class="eventNews-footer">
                        <div class="eventNews-field">
                            Author: @news.AuthorName
                        </div>
                        <div class="eventNews-click">
                            Click and read!
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <SimpleLoading></SimpleLoading>
        }
    </div>
</div>

@code {

    [Parameter]
    public Guid? EventId { get; set; }
    private List<GetNewsDto>? News;
    
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";
    
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl +  $"News/Event/{EventId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.SendAsync(request);
        News = await response.Content.ReadFromJsonAsync<List<GetNewsDto>>();
        
        await base.OnInitializedAsync();
    }
    
    private void GoToTheNews(Guid newsId)
    {   
        Navigation.NavigateTo($"/News/{newsId}");
    }
}