@using SEM.App.Authentication
@using SEM.App.Components.Loadings
@using SEM.App.Data
@using System.Net.Http.Headers
@using System.Net.Mime
@using System.Text
@using System.Text.Json

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<div class="eventInformation">
    <div class="eventInformation-title">
        <h3>Event Information Manager</h3>
    </div>
    <div class="event-field">
        <button class="btn btn-outline-dark btn-sm" @onclick="Open">Edit Information</button>
    </div>
    <div class="eventInformation-content">
        @if (myEvent == null)
        {
            <SimpleLoading></SimpleLoading>
        }
        else
        {
            <div class="event-field">
        <b>Description: </b> @myEvent.Description
    </div>
    <div class="event-field">
        <b>Location: </b>
        @myEvent.Location
    </div>
            <div class="event-field">
                <b>Published: </b>
                @if (myEvent.IsPublic)
                {
                    @IsPublic
                    @if (!RequestingIsPublicStateChange)
                    {
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeIsPublicState(false)">Un-Publish</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Un-publishing"></LoadingButton>
                    }
                }
                @if (!myEvent.IsPublic)
                {
                    @IsPrivate
                    @if (!RequestingIsPublicStateChange)
                    {
                        <button class="btn btn-outline-dark btn-sm" @onclick="() => ChangeIsPublicState(true)">Publish</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Publishing"></LoadingButton>
                    }
                }
            </div>
            <div class="event-field">
                <b>Start: </b> @myEvent.StartDate
            </div>
            <div class="event-field">
                <b>Finish: </b> @myEvent.FinishDate
            </div>
            <div class="event-field">
                <b>Open registrations: </b> @myEvent.OpenRegistrationsDateTime
                @if (myEvent.OpenRegistrationsDateTime < DateTime.Now && myEvent.CloseRegistrationsDateTime > DateTime.Now)
                {
                    @OpenedRegistrations
                }
                else
                {
                    @ClosedRegistrations
                }
            </div>
            <div class="event-field">
                <b>CloseRegistrations: </b> @myEvent.CloseRegistrationsDateTime
            </div>
            <div class="event-field">
                <b>Max registrations: </b> @myEvent.MaxRegistrations
            </div>
            <div class="event-field">
                <b>Total registrations: </b> @myEvent.TotalRegistrationsQuantity
            </div>
            <div class="event-field">
                <b>Accepted registrations: </b> @myEvent.AcceptedQuantity / @myEvent.MaxRegistrations
            </div>
            <div class="event-field">
                <b>Pre-registered registrations: </b> @myEvent.PreRegisteredQuantity
            </div>
            <div class="event-field">
                <b>Cancelled registrations: </b> @myEvent.CancelledQuantity
            </div>
            <div class="event-field">
                <b>Creation date: </b> @myEvent.CreationDate.ToLongDateString() at @myEvent.CreationDate.ToShortTimeString()
            </div>
            <div class="event-field">
                <b>Created by: </b> @myEvent.CreatorNickName
            </div>
            <div class="event-field">
                <b>Image: </b>
                @if (!RequestingUploadImage)
                {
                    @if (myEvent.ImageUrl != null)
                    {
                        <img size="" src="@myEvent.ImageUrl" alt="Event image" width="300"/>

                        @if (!RequestingDeleteImage)
                        {
                            <button class="btn btn-outline-dark btn-sm" @onclick="DeleteImage">Delete image</button>
                        }
                        else
                        {
                            <LoadingButton ButtonType="dark" LoadingText="Deleting"></LoadingButton>
                        }
                    }
                    @if (myEvent.ImageUrl == null)
                    {
                        <form @onsubmit="@UploadImage" enctype="multipart/form-data">
                            
                            @if (imgUrl != null)
                            {
                                <img size="" src="@imgUrl" alt="Event image" width="300"/>
                                <input type="submit" value="Upload">
                                <button class="btn btn-outline-dark btn-sm" @onclick="DeleteLocalImage">Delete preview</button>
                            }
                            else
                            {
                                <InputFile OnChange="@SelectFile"/>
                            }
                        </form>
                    }
                }
                else
                {
                    <LoadingButton ButtonType="dark" LoadingText="Uploading"></LoadingButton>
                }
            </div>
            <div class="event-field">
                @if (ErrorMessage != null)
                {
                    <div class="alert alert-warning" role="alert">
                        @ErrorMessage
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] 
    public string? EventId { get; set; }
    
    private SportEventOrganizer? myEvent;
    
    private const string IsPublic = "✅  ";
    private const string IsPrivate = "❌  ";
    private const string ClosedRegistrations = " - ⛔ Registrations closed";
    private const string OpenedRegistrations = " - ✅ Registrations open";
    
    private bool RequestingIsPublicStateChange;
    private bool RequestingDeleteImage;
    private bool RequestingUploadImage;
    private bool RequestingUpdateInformation;   
    private string? ErrorMessage;  
    
    private string ModalClass = "";
    private string ModalDisplay = "none;";
    private bool ShowBackdrop;    
    
    private string Token = string.Empty;
    private static readonly string semApiUrl = ApiService.GetBaseApiCallUrl();

    private StreamContent fileContent;
    private string fileName;
    private string? imgUrl; 
    private string imageType;
    
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await GetMyEventAsOrganizer();
        }
        
        await base.OnInitializedAsync();
    }
    
    private async Task GetMyEventAsOrganizer()
    {
        ErrorMessage = null;
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl +  $"Events/{EventId}/organizer");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            myEvent = await response.Content.ReadFromJsonAsync<SportEventOrganizer>();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }
    }
    
    private async Task ChangeIsPublicState(bool isPublic)
    {
        RequestingIsPublicStateChange = true;
        var request = new HttpRequestMessage(HttpMethod.Put, semApiUrl +  $"Events/{EventId}/is-public/{isPublic}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await GetMyEventAsOrganizer();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = "Something went wrong with our servers, try it again later.";
        }
        RequestingIsPublicStateChange = false;
    }

    private void Open()
    {
        ModalDisplay = "block;";    
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    
    private void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    
    private async Task UpdateInformation()
    {
        RequestingUpdateInformation = true;
        var jsonInString = JsonSerializer.Serialize(new
        {       
            myEvent?.Name,
            myEvent?.Description,
            myEvent?.Location,
            myEvent?.MaxRegistrations,
            myEvent?.StartDate,
            myEvent?.FinishDate, 
            myEvent?.OpenRegistrationsDateTime, 
            myEvent?.CloseRegistrationsDateTime
        });   
        
        var request = new HttpRequestMessage(HttpMethod.Put, semApiUrl + $"Events/{EventId}")
        {
            Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = "Something went wrong with our servers, try it again later.";
        }
        await GetMyEventAsOrganizer();
        RequestingUpdateInformation = false;
        Close();
    }
    
    private async Task SelectFile(InputFileChangeEventArgs  e)
    {
        ErrorMessage = null;
        string[] imageTypes = { "image/jpeg", "image/png" };
        if (imageTypes.Contains(e.File.ContentType))
        {
    // setting the max size for the file 
            long maxFileSize = 1024 * 1024 * 5; //5MB
    // Provide the HTTP Content based Stream
    // and open the stream for reading the uploaded file
            if (e.File.Size > maxFileSize)
            {
                ErrorMessage = "File is too big, max size is 5 MB";
                return;
            }
            var resized = await e.File.RequestImageFileAsync(e.File.ContentType, 300, int.MaxValue);
            fileContent = new StreamContent(resized.OpenReadStream(maxFileSize));
    // read file name
            fileName = resized.Name;
            var fileSize = new byte[resized.Size];
    // read the file bytes in sequence
            await resized.OpenReadStream(maxFileSize).ReadAsync(fileSize);
    // read file content type
            imageType = resized.ContentType;
    // create URL
            imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(fileSize)}";

            StateHasChanged();
        }
        else
        {
            ErrorMessage = "Only jpeg and png files are allowed.";
        }
    }
    
    private void DeleteLocalImage()
    {
        imgUrl = null;
    }   
    
    private async Task DeleteImage()    
    {
        RequestingDeleteImage = true;
        var request = new HttpRequestMessage(HttpMethod.Delete, semApiUrl + $"Events/{EventId}/delete-image");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)  
        {
            ErrorMessage = "Something went wrong with our servers, try it again later.";
        }
        imgUrl = null;
        await GetMyEventAsOrganizer();
        RequestingDeleteImage = false;
    }   

    private async Task UploadImage()    
    {
        RequestingUploadImage = true;
        using var content = new MultipartFormDataContent();
        content.Add(content: fileContent, name: "\"file\"", fileName:fileName);
        var request = new HttpRequestMessage(HttpMethod.Post, semApiUrl + $"Events/{EventId}/upload-image")
        {
            Content = content
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)  
        {
            ErrorMessage = "Something went wrong with our servers, try it again later.";
        }
        await GetMyEventAsOrganizer();
        RequestingUploadImage = false;
    }   

}

@* Modal Update Information *@
@if (myEvent != null)
{
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Event Information</h5>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" required @bind="@myEvent.Name" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea type="text" class="form-control" id="description" required @bind="@myEvent.Description"></textarea>
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <input type="text" class="form-control" id="location" required @bind="@myEvent.Location" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Start Date/Time</label>
                    <input type="datetime-local" @bind-value="@myEvent.StartDate" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Finish Date/Time</label>
                    <input type="datetime-local" @bind-value="@myEvent.FinishDate" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Open Registrations Date/Time</label>
                    <input type="datetime-local" @bind-value="@myEvent.OpenRegistrationsDateTime" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Close Registrations Date/Time</label>
                    <input type="datetime-local" @bind-value="@myEvent.CloseRegistrationsDateTime" />
                </div>
                <div class="mb-3">
                    <label for="maxRegistrations" class="form-label">Max Registrations</label>
                    <input type="number" class="form-control" id="maxRegistrations" required @bind="@myEvent.MaxRegistrations" />
                </div>
            </div>
            <div class="modal-footer">
                @if (!RequestingUpdateInformation)
                {
                    <button type="button" class="btn btn-outline-dark btn-sm" @onclick="UpdateInformation">Update</button>
                }
                else
                {
                    <button class="btn btn-outline-dark btn-sm" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Setting...</span>
                    </button>
                }
                <button type="button" class="btn btn-outline-dark btn-sm" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
        </div>  
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

}