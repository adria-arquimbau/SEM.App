@using SEM.App.Authentication
@using System.Net.Http.Headers
@using System.Net
@using SEM.App.Data
@using SEM.App.Data.Models

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IToastService toastService

<div class="main">
    <div>
        <button class="btn btn-outline-dark btn-sm" @onclick="OpenAddManager">Add Manager</button>
    </div>
    
    @if (Managers != null)
    {
        <table class="table table-striped">
        <thead>
        <th scope="col">User</th>
        <th scope="col">Role</th>
        <th scope="col">Remove</th>
        </thead>
        @foreach (var manager in Managers)  
        {
            <tbody>
            <tr>    
                <td>
                    @manager.User.UserName
                </td>
                <td>
                    @manager.Role
                </td>
                <td>
                    @if (manager.Role != ManagerRole.Owner)
                    {
                        @if (!manager.Requesting)
                        {
                            <button class="btn btn-outline-dark btn-sm" @onclick="() => RemoveManager(manager)">Remove</button>
                        }
                        else
                        {
                            <LoadingButton ButtonType="dark" LoadingText="Removing"></LoadingButton>
                        }
                        
                    }
                </td>
            </tr>
            </tbody>
        }
    </table>
    }
    @if(Managers == null && ErrorMessage == null)
    {
        <SimpleLoading></SimpleLoading>
    }

    <div>
        <b>Roles:</b>
        <p>Admin => All permissions</p>
        <p>Basic => Check in registrations, create and edit schedules, create news</p>
        <p>Check in => Just check in registrations</p>
    </div>
    @if (ErrorMessage != null)
    {
        <div class="alert alert-warning" role="alert">
            @ErrorMessage
        </div>
    }
</div>


@if (AddAManagerIsOpen)
{
    <AddManager EventId="@EventId"
                Managers="@Managers"
        OnClose="@OnAddManagerClose"></AddManager>
}

@code {
    [Parameter]
    public string? EventId { get; set; }

    private string? Token;
    private string? ErrorMessage;   
    private List<ManagerDto>? Managers;
        
    private bool AddAManagerIsOpen;
    
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await GetManagers();
        }
    }

    private async Task GetManagers()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, ApiService.GetBaseApiCallUrl() + $"Managers/Event/{EventId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Managers = await response.Content.ReadFromJsonAsync<List<ManagerDto>>();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }
        if (response.StatusCode == HttpStatusCode.NotAcceptable)
        {
            ErrorMessage = "Only the Owner and Admins can review the managers.";
        }
    }   
    
    private async Task RemoveManager(ManagerDto manager)
    {     
        manager.Requesting = true;
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
     
        var request = new HttpRequestMessage(HttpMethod.Delete, ApiService.GetBaseApiCallUrl() + $"Managers/{manager.Id}/Event/{EventId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowToast(ToastLevel.Success, $"User: {manager.User.UserName} removed as a manager", "Manager removed");
            await GetManagers();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }
        if (response.StatusCode == HttpStatusCode.NotAcceptable)
        {
            ErrorMessage = "Only the Owner and Admins can remove managers.";
        }
        
        manager.Requesting = false;
    }

    private void OpenAddManager()
    {
        AddAManagerIsOpen = true;
    }
    
    private async Task OnAddManagerClose()
    {
        AddAManagerIsOpen = false;
        await GetManagers();
    }
}       
