@using SEM.App.Data
@using SEM.App.Components
@using SEM.App.Components.Loadings
@using SEM.App.Data.Models
@using SEM.App.Authentication
@using System.Net.Http.Headers
@using Dialog = SEM.App.Components.Dialog

@inject HttpClient HttpClient
@inject AuthenticationStateProvider authenticationStateProvider

<div class="top">
    <h3>Schedule Manager</h3>
    
    <div class="dates-content">
        <div class="dates-content-field">
            Event starts at: @Event.StartDate.ToLongDateString() at @Event.StartDate.ToShortTimeString()
        </div>
        <div class="dates-content-field">
            Event finish at: @Event.StartDate.ToLongDateString() at @Event.FinishDate.ToShortTimeString()
        </div>
    </div>
</div>
<div class="main">
    <h4>Schedule</h4>
    <button type="button" class="btn btn-outline-dark btn-sm" data-dismiss="modal" @onclick="OpenCreateSchedule">Add</button>
    
    @if (Schedules == null && ErrorMessage == null)
    {
        <SimpleLoading></SimpleLoading>
    }
    @if (Schedules != null)
    {
        <div class="schedules">
            @foreach (var schedule in GetScheduleOrganizedByDays())
            {
                <Separator></Separator>
                <div>
                    @schedule.Day.ToLongDateString()
                </div>
                
                @foreach (var program in schedule.Schedules)
                {
                    <SmallSeparator></SmallSeparator>
                    <div>
                        <div>
                            Title: @program.Title
                        </div>
                        <div>
                            Description: @program.Description
                        </div>
                        <div>
                            Time: @program.DateTime.ToShortTimeString()
                        </div>
                        <div class="schedule-footer">
                            <button type="button" class="btn btn-outline-dark btn-sm" data-dismiss="modal">Update</button>
                            <button type="button" class="btn btn-outline-dark btn-sm" data-dismiss="modal" @onclick="() => OpenDeleteDialog(program.Id, program.Title)">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    }
    
    <div class="alert alert-warning" role="alert">
        @ErrorMessage
    </div>
</div>

@if (CreateScheduleIsOpen)
{
    <CreateSchedule EventId="@Event.Id"
        OnClose="@OnCreateScheduleClose"></CreateSchedule>
}
@if (DialogDeleteScheduleIsOpen)
{
    <Dialog Caption="Delete registration"
            RequestingDeleteRegistration="@RequestingDeleteSchedule"
            Message="@message"
            OnClose="@OnDeleteScheduleDialogClose"
            Type="Dialog.Category.DeleteNot">
    </Dialog>
}

@code {
    [Parameter]
    public SportEventOrganizer? Event { get; set; }
    
    private string? ErrorMessage;  
    private List<ScheduleDto>? Schedules;
    private Guid scheduleIdToDelete;
    private static readonly string semApiUrl = ApiService.GetBaseUrl();
    private string? Token;  
    private string message;
    private bool CreateScheduleIsOpen;
    private bool DialogDeleteScheduleIsOpen;
    private bool RequestingDeleteSchedule;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        
        await GetSchedules();
    }
    
    private async Task GetSchedules()
    {
        var response = await HttpClient.GetAsync(semApiUrl + $"events/{Event.Id}/schedules");
        if (response.IsSuccessStatusCode)
        {
            Schedules = await response.Content.ReadFromJsonAsync<List<ScheduleDto>>();
        }
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = Messages.ApiInternalServerErrorMessage;
        }
    }

    private void OpenCreateSchedule()
    {   
        CreateScheduleIsOpen = true;
    }

    private async Task OnCreateScheduleClose()
    {
        CreateScheduleIsOpen = false;
        await GetSchedules();
    }
    
    private void OpenDeleteDialog(Guid id, string title)
    {
        DialogDeleteScheduleIsOpen = true;
        scheduleIdToDelete = id;
        message = $"Do you want to delete the {title} schedule?";
    }
    
    private async Task OnDeleteScheduleDialogClose(bool isOk)   
    {
        if (isOk)
        {
            RequestingDeleteSchedule = true;
            var request = new HttpRequestMessage(HttpMethod.Delete, ApiService.GetBaseUrl() +  $"events/{Event.Id}/schedule/{scheduleIdToDelete}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
            var response = await HttpClient.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                await GetSchedules();
            }
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = Messages.ApiInternalServerErrorMessage;
            }
            
            RequestingDeleteSchedule = false;
        }
        DialogDeleteScheduleIsOpen = false;
    }
    
    private List<ScheduleDays> GetScheduleOrganizedByDays()
    {
        var scheduleDays = new List<ScheduleDays>();
        foreach (var schedule in Schedules)
        {
            var day = scheduleDays.FirstOrDefault(x => x.Day == DateOnly.FromDateTime(schedule.DateTime));

            if (day == null)
            {
                scheduleDays.Add(new ScheduleDays
                {
                    Day = DateOnly.FromDateTime(schedule.DateTime),
                    Schedules = new List<ScheduleDto>
                    {
                        schedule
                    }
                });
            }
            if (day != null)
            {
                day.Schedules?.Add(schedule);
            }
        }
        
        return scheduleDays;
    }

    private class ScheduleDays
    {
        public DateOnly Day { get; set; }
        public List<ScheduleDto>? Schedules { get; set; }
    }
}