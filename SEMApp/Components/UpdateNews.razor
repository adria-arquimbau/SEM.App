@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using SEM.App.Authentication
@using SEM.App.Data
@using SEM.App.Data.Models

@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <h4 class="modal-title">Update a News</h4>
         </div>
         <div class="modal-body">
            <div class="mb-3">
               <label for="title" class="form-label">Title</label>
               <input type="text" class="form-control" id="title" required @bind="@NewsToUpdate.Title" />
            </div>
            <div class="mb-3">
               <label for="description" class="form-label">Description</label>
               <textarea type="text" class="form-control" id="description" required @bind="@NewsToUpdate.Description"></textarea>
            </div>
         </div>
         <div class="modal-footer">
            @if (!RequestingUpdate)
            {  
               <button type="button" class="btn btn-outline-dark btn-sm" @onclick=Update>Update</button>
            }
            else
            {
               <td>
                  <button class="btn btn-outline-dark btn-sm" type="button" disabled>
                     <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                     <span class="sr-only">Updating...</span>
                  </button>
               </td>
            }
            <button type="button" class="btn btn-outline-dark btn-sm" @onclick="@Cancel">Go back</button>
         </div>
      </div>
   </div>
   @if (ErrorMessage != null)
    {
        <div class="alert alert-warning" role="alert">
            @ErrorMessage
        </div>
    }
</div>

@code {
   [Parameter]
   public GetNewsDto? NewsToUpdate { get; set; }
   [Parameter]
   public EventCallback OnClose { get; set; }

   private string? ErrorMessage;
   private bool RequestingUpdate;

   private void Cancel()
   {
      OnClose.InvokeAsync();
   }

   private async Task Update()
   {
      RequestingUpdate = true;
      var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
      var token = await customAuthStateProvider.GetToken();
      var jsonInString = JsonSerializer.Serialize(new
      {
         NewsToUpdate.Title,
         NewsToUpdate.Description
      });
      var request = new HttpRequestMessage(HttpMethod.Put, ApiService.GetBaseApiCallUrl() + $"News/{NewsToUpdate.Id}")
      {
         Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
      };
      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
      var response = await HttpClient.SendAsync(request);
      if (response.IsSuccessStatusCode)
      {
         RequestingUpdate = false;
         await OnClose.InvokeAsync();
      }
      if (!response.IsSuccessStatusCode)
      {
         ErrorMessage = Messages.ApiInternalServerErrorMessage;
      }
   }
}
