@page "/manage-event/{EventId}"
@attribute [Authorize(Policy = "admin-organizer")]

@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Components.EventManager
@using SEM.App.Authentication
@using System.Net.Http.Headers
@using Dialog = SEM.App.Components.Dialog

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

@if (myEvent == null)
{
    <SimpleLoading></SimpleLoading>
}
else
{
    <div class="event">
        <EventMenuManager 
            ShowMenuCallBack="ShowMenu"
            Event="@myEvent"></EventMenuManager>
        
        @if (ShowMenuSection == Event.MenuSection.Information)
        {
            <EventInformationManager
                EventId="@EventId">
            </EventInformationManager>
        }
        @if (ShowMenuSection == Event.MenuSection.Registrations)
        {
            <RegistrationsManager
                EventId="@myEvent.Id"
                Registrations="@myEvent.Registrations"
                RefreshEvent="@GetMyEventAsOrganizer">
            </RegistrationsManager>
        }
        @if (ShowMenuSection == Event.MenuSection.Schedule)
        {
            <div class="event-news">
                <EventScheduleManager
                    Event="@myEvent"></EventScheduleManager>
            </div>
        }
        @if (ShowMenuSection == Event.MenuSection.News)
        {
            <EventNewsManager EventId="@EventId"></EventNewsManager>
        }
        @if (ShowMenuSection == Event.MenuSection.Competition)
        {
            <div class="event-news">
                <EventCompetitionManager></EventCompetitionManager>
            </div>
        }
        
        <div class="event-field">
            @if (ErrorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
        </div>
        <div class="footer">
            <div class="event-field">
                <button class="btn btn-outline-dark btn-sm" @onclick="GoToEvent">Go to event</button>
            </div>
            <div class="event-field">
                <button class="btn btn-outline-dark btn-sm" @onclick="OpenDeleteEventDialog">Delete event</button>
            </div>
            <div class="event-field">
                <button class="btn btn-outline-dark btn-sm" @onclick="GoBack">Back</button>
            </div>
        </div>
    </div>
}

@if (DialogDeleteEventIsOpen)
{
    <Dialog Caption="Delete event"
            RequestingDeleteRegistration="@RequestingDeleteEvent"
            Message="@message"
            OnClose="@OnDeleteEventDialogClose"
            Type="Dialog.Category.DeleteNot">
    </Dialog>
}


@code { 
    [Parameter] 
    public string? EventId { get; set; }    

    private SportEventOrganizer? myEvent;
    private Event.MenuSection ShowMenuSection = Event.MenuSection.Information;

    private string? message;    
    private string? ErrorMessage;  
    
    private bool DialogDeleteEventIsOpen;
    private bool RequestingDeleteEvent;
    
    private string Token = string.Empty;
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            await GetMyEventAsOrganizer();
        }
        
        await base.OnInitializedAsync();
    }
    
    private void ShowMenu(Event.MenuSection section)
    {
        ShowMenuSection = section;
    }

    private void OpenDeleteEventDialog()
    {
        DialogDeleteEventIsOpen = true;
        message = "Are you sure do you want to delete this event?";
    }
    
    private async Task OnDeleteEventDialogClose(bool isOk)
    {
        if (isOk)
        {
            RequestingDeleteEvent = true;
            var request = new HttpRequestMessage(HttpMethod.Delete, semApiUrl +  $"Events/{EventId}/delete");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
            var response = await HttpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Something went wrong with our servers, try it again later.";
            }
            GoBack();
        }
        DialogDeleteEventIsOpen = false;
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/organizer-panel");
    }

    private void GoToEvent()
    {
        Navigation.NavigateTo($"/Event/{EventId}");
    }

    private async Task GetMyEventAsOrganizer()
    {   
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl +  $"Events/{EventId!}/organizer");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            GoBack();
        }
        myEvent = await response.Content.ReadFromJsonAsync<SportEventOrganizer>();
    }
}
