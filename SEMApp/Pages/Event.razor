@page "/Event/{EventId:guid}"

@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Components.Event
@using SEM.App.Authentication
@using System.Net.Http.Headers

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<PageTitle>Event @SportEvent?.Name</PageTitle>
    
@if (SportEvent == null)
{
    <SimpleLoading></SimpleLoading>
}
else
{
    <div class="event">
        <EventMenu
            ShowMenuCallBack="ShowMenu"
            Event="SportEvent">
        </EventMenu>
        @if (ShowMenuSection == MenuSection.Information)
        {
            <div class="event-content">
                <div class="event-image-container">
                    @if (SportEvent.ImageUrl != null)
                    {
                        <img class="event-image" src="@SportEvent.ImageUrl"/>
                    }
                </div>
                <div class="event-field">
                    <h4>Information</h4>
                </div>
                <div class="event-field">
                    <b>Description: </b>
                    @SportEvent.Description
                </div>
                <div class="event-field">
                    <b>Location: </b>
                    @SportEvent.Location
                </div>
                <div class="event-field">
                    <b>Start: </b> @SportEvent.StartDate.ToLongDateString() at @SportEvent.StartDate.ToShortTimeString()
                </div>
                <div class="event-field">
                    <b>Finish: </b> @SportEvent.FinishDate.ToLongDateString() at @SportEvent.FinishDate.ToShortTimeString()
                </div>
                <div class="event-field">
                    <b>Created by: </b> @SportEvent?.CreatorNickName
                </div>
            </div>
        }
        @if (ShowMenuSection == MenuSection.Registrations)
        {
            <EventRegistrations SportEvent="SportEvent"></EventRegistrations>
        }
        @if (ShowMenuSection == MenuSection.Schedule)
        {
            <div class="event-news">
                <EventSchedule Event="SportEvent"></EventSchedule>
            </div>
        }
        @if (ShowMenuSection == MenuSection.News)
        {
            <div class="event-news">
                <EventNews EventId="EventId"></EventNews>
            </div>
        }
        @if (ShowMenuSection == MenuSection.Competition)
        {
            <div class="event-news">
                <EventCompetition></EventCompetition>
            </div>
        }
        @if (ShowMenuSection == MenuSection.QRCode)
        {
            <div class="event-news">
                <EventQrCode EventId="EventId"></EventQrCode>
            </div>
        }
        
        <div class="event-footer">
            <AuthorizeView Policy="admin-organizer">
                @if (ICanManageThisEvent)
                {
                    <div class="event-field">
                        <button class="btn btn-outline-dark btn-sm" @onclick="ManageEvent">Manage event</button>
                    </div>
                }
            </AuthorizeView>
            <div class="event-field">
                <button class="btn btn-outline-dark btn-sm" @onclick="BackToEvents">Go Back to events</button>
            </div>
        </div>
    </div>
}

@code { 
    [Parameter] 
    public Guid? EventId { get; set; }    
    private SportEvent? SportEvent { get; set; }
    
    private bool ICanManageThisEvent { get; set; }
    private MenuSection ShowMenuSection = MenuSection.Information;
    
    private string Token = string.Empty;
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        var response = await HttpClient.GetAsync(semApiUrl + $"Events/{EventId}");
        if (!response.IsSuccessStatusCode)
        {
            BackToEvents();
        }
        SportEvent =  await response.Content.ReadFromJsonAsync<SportEvent>();
        
        await AskIfICanManageThisEvent();
        await base.OnInitializedAsync();
    }

    private void BackToEvents()
    {
        Navigation.NavigateTo($"/Events");
    }

    private void ManageEvent()
    {
        Navigation.NavigateTo($"/manage-event/{EventId}/Information");
    }

    private async Task AskIfICanManageThisEvent()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl + $"Events/{EventId}/organizer");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            ICanManageThisEvent = true;
        }
    }   

    private void ShowMenu(MenuSection section)
    {
        ShowMenuSection = section;
    }

    public enum MenuSection
    {
        Information,
        Registrations,
        News,
        Competition,
        Schedule,
        QRCode
    }  
}   
