@page "/admin-panel"
@attribute [Authorize(Policy = "admin")]

@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Authentication
@using System.Net.Http.Headers

@inject UsersService UsersService
@inject AuthenticationStateProvider authenticationStateProvider
@inject HttpClient HttpClient

<PageTitle>Admin Panel</PageTitle>

<div class="admin-panel-page">
    @if (users == null)
    {
        <SimpleLoading></SimpleLoading>
    } 
    else
    {
        @foreach (var user in users)
        {
            <div class="user">
                <div class="user-content">
                    <div class="user-field">
                        <b>User Name: </b> @user.UserName                     
                    </div>
                    <div class="user-field">
                        <b>Name: </b> @user.Name                                            
                    </div>
                    <div class="user-field">
                        <b>Email: </b> @user.Email                                            
                    </div>
                    <div class="user-field">
                        <b>Roles: </b> @foreach (var role in user.Roles)
                                       {
                                           @role
                                       }
                    </div>
                    <div class="user-field">
                        <b>Confirmed email: </b>
                        @if (user.EmailConfirmed)
                        {
                            @TrueCheck
                        }
                        else
                        {
                            @FalseCheck
                        }
                    </div>
                    <div class="user-field">
                        <b>Registration date: </b> @user.RegistrationDate                                            
                    </div>
                    <div class="user-field">
                        <b>Last login time: </b> @user.LastLoginTime                                            
                    </div>
                    <div class="user-field">
                        @if (!user.EmailConfirmed)
                        {
                            <button class="btn btn-info" @onclick="() => ConfirmEmail(user.Id)">Confirm Email</button>
                        }
                    </div>
                    <div class="user-field">
                        @if (!user.Roles.Exists(x => x.Contains("Organizer")))
                        {
                            if (!RequestingUpdateStatus)
                            {
                                <button class="btn btn-outline-dark" @onclick="() => SetRole(user.Id, organizerRole)">Make Organizer</button>
                            }
                            else
                            {
                                <LoadingButton ButtonType="success"
                                    LoadingText="Setting role"></LoadingButton>
                            }
                            
                        }
                        @if (user.Roles.Exists(x => x.Contains("Organizer")) && !user.Roles.Exists(x => x.Contains("Admin")))
                        {
                            if (!RequestingUpdateStatus)
                            {
                                <button class="btn btn-outline-dark btn-sm" @onclick="() => DeleteRole(user.Id, organizerRole)">Delete Organizer</button>
                            }
                            else
                            {
                                <LoadingButton ButtonType="danger" LoadingText="Erasing role"></LoadingButton>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>


@code
{
    private List<UserDto>? users;
    private string? Token;
        
        private const string TrueCheck = "✅";
    private const string FalseCheck = "❌";
        private const string organizerRole = "organizer";

    private bool RequestingUpdateStatus;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        await GetUsers();
        await base.OnInitializedAsync();
    }

    private async Task ConfirmEmail(Guid userId)
    {
        await UsersService.ConfirmEmail(Token!, userId);
        await GetUsers();
    }
    
    private async Task SetRole(Guid userId, string role)
    {
        RequestingUpdateStatus = true;
        var request = new HttpRequestMessage(HttpMethod.Put, "https://sport-management-api.azurewebsites.net/api/" +  $"Users/set-role/{userId}/role/{role}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        await HttpClient.SendAsync(request);

        await GetUsers();
        RequestingUpdateStatus = false;
    }
    
    private async Task DeleteRole(Guid userId, string role)
    {   
        RequestingUpdateStatus = true;
        var request = new HttpRequestMessage(HttpMethod.Delete, "https://sport-management-api.azurewebsites.net/api/" +  $"Users/delete-role/{userId}/role/{role}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token); 
        await HttpClient.SendAsync(request);
        
        await GetUsers();  
        RequestingUpdateStatus = false;
    }
    
    private async Task GetUsers()
    {
        users = await UsersService.GetUsers(Token!);
    }
}
