@page "/organizer-panel"
@attribute [Authorize(Policy = "admin-organizer")]

@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Authentication
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers

@inject AuthenticationStateProvider authenticationStateProvider
@inject EventsService EventService
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<PageTitle>Organizer Panel</PageTitle>

<div class="organizer-panel-page">
    <div class="organizer-panel-top">
        <h1>Organizer Panel</h1>
        <button class="btn btn-outline-dark btn-sm" @onclick="Open">Create Event</button>
    </div>
    
    @if (myEvents == null)
    {
        <SimpleLoading></SimpleLoading>
    }
    else
    {
        @foreach (var myEvent in myEvents)
        {
            <div class="event">
                <div class="event-content">
                    <div class="event-field">
                        <div class="event-field">
                            <h2><b>Title: </b> @myEvent.Name</h2>
                        </div>
                        <div class="event-field">
                            <img class="event-image" src="@myEvent.ImageUrl" alt="" width="300"/>
                        </div>
                        <div class="event-field">
                            <b>Registrations: </b> @myEvent.TotalRegistrationsQuantity / @myEvent.MaxRegistrations
                        </div>
                        <div class="event-field">
                            <b>Start: </b> @myEvent.StartDate
                        </div>
                        <div class="event-field">
                            <b>Finish: </b> @myEvent.FinishDate
                        </div>
                        <div class="event-field">
                            <b>Creation date: </b> @myEvent.CreationDate
                        </div>
                        <div class="event-field">
                            <b>Published: </b>
                            @if (myEvent.IsPublic)
                            {
                                @IsPublic
                            }
                            @if (!myEvent.IsPublic)
                            {
                                @IsPrivate
                            }
                        </div>
                        <div class="event-field">
                            <button class="btn btn-outline-dark btn-sm" @onclick="() => Manage(myEvent.Id)">Manage</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@* Modal Create Event *@

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Event</h5>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="eventName" class="form-label">Event Name</label>
                    <input type="text" class="form-control" id="eventName" required @bind-value="eventName" />
                </div>
                <div class="mb-3">
                    <label for="eventDescription" class="form-label">Event Description</label>
                    <textarea type="text" class="form-control" id="eventDescription" required @bind="eventDescription"></textarea>
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <input type="text" class="form-control" id="location" required @bind-value="location" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Start Date/Time</label>
                    <input type="datetime-local" @bind-value="startDateTime" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Finish Date/Time</label>
                    <input type="datetime-local" @bind-value="finishDateTime" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Open Registrations Date/Time</label>
                    <input type="datetime-local" @bind-value="openRegistrationsDateTime" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Close Registrations Date/Time</label>
                    <input type="datetime-local" @bind-value="closeRegistrationsDateTime" />
                </div>
                <div class="mb-3">
                    <label for="maxRegistrations" class="form-label">Max number of registrations</label>
                    <input type="number" class="form-control" id="maxRegistrations" required @bind-value="maxRegistrations" />
                </div>
                <div class="mb-3">
                    * This event will be created private
                </div>
            </div>
            <div class="modal-footer">
                @if (!RequestingCreation)
                {
                    <button type="button" class="btn btn-outline-dark btn-sm" @onclick="CreateEvent">Create</button>
                }
                else
                {
                    <LoadingButton ButtonType="primary" LoadingText="Creating"></LoadingButton>
                }
                <button type="button" class="btn btn-outline-dark btn-sm" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
            @if (isCreated.HasValue)
            {
                @if (!isCreated.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-danger" role="alert">
                            Something went wrong
                        </div>
                    </div>
                }
                @if (isCreated.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-success" role="alert">
                            Event Created!
                        </div>
                    </div>
                }
            }
        </div>  
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    private List<SportEventOrganizer>? myEvents;
    
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";
    private const string IsPublic = "✅";
    private const string IsPrivate = "❌";

    protected override async Task OnInitializedAsync()
    {
        await RefreshEvents();  
    }

    private void Manage(Guid eventId)   
    {
        Navigation.NavigateTo($"/manage-event/{eventId}/Information");
    }

    private async Task RefreshEvents()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        myEvents = await EventService.GetMyEventsAsOrganizer(token);
    }
    
    // Modal Create Event
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    
    private bool ShowBackdrop;      
    private bool? isCreated;
    private bool RequestingCreation;
    
    private string eventName = "";      
    private string eventDescription = "";
    private string location = "";
    private int maxRegistrations = 100;
    private DateTime? startDateTime = DateTime.Now;
    private DateTime? finishDateTime = DateTime.Now;
    private DateTime? openRegistrationsDateTime = DateTime.Now;
    private DateTime? closeRegistrationsDateTime = DateTime.Now;
    
    private async Task CreateEvent()
    {
        RequestingCreation = true;
        if (!string.IsNullOrEmpty(eventName) && !string.IsNullOrEmpty(eventDescription))
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            var token = await customAuthStateProvider.GetToken();
            var jsonInString = JsonSerializer.Serialize(new
            {       
                Name = eventName,
                Description = eventDescription,
                Location = location,
                MaxRegistrations = maxRegistrations,
                StartDate = startDateTime,
                FinishDate = finishDateTime,
                OpenRegistrationsDateTime = openRegistrationsDateTime,
                CloseRegistrationsDateTime = closeRegistrationsDateTime
            });   
        
            var request = new HttpRequestMessage(HttpMethod.Post, semApiUrl + "Events")
            {
                Content = new StringContent(jsonInString, Encoding.UTF8, "application/json")
            };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                isCreated = true;
                await RefreshEvents();
                Close();
            }
            if (!response.IsSuccessStatusCode)
            {
                isCreated = false;
            }
        }
        RequestingCreation = false;
    }

    private void Open()
    {
        ModalDisplay = "block;";    
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void Close()
    {
        isCreated = null;
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        eventName = "";
        eventDescription = "";
    }
}   
    