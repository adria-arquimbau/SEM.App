@page "/account"

@using SEM.App.Data
@using SEM.App.Authentication

@attribute [Authorize(Policy = "admin-organizer-user")]

@inject UsersService UsersService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Account</PageTitle>

@if (User == null)
{
    <div class="loading-page">
        <div class="spinner-border loading-spinner" role="status"></div>
        <p>Loading your user... Please wait</p>
    </div>
}
else
{
	<div class="my-account">
		<div class="my-account-content">
			<h1>Your Account</h1>
			<div class="my-account-field">
				<b>User Name: </b> @User.UserName
			</div>
			<div class="my-account-field">
				<b>Roles: </b> @foreach (var role in User.Roles)
				               {
					               @role
				               }
			</div>
			<div class="my-account-field">
				<b>Name: </b> @User.Name
			</div>
			<div class="my-account-field">
				<b>Second Name: </b> @User.SecondName
			</div>
			<div class="my-account-field">
				<b>Email: </b> @User.Email
			</div>
			<div class="my-account-field">
				<b>Address: </b> @User.Address
			</div>
			<div class="my-account-field">
				<b>City: </b> @User.City
			</div>
			<div class="my-account-field">
				<b>PostalCode: </b> @User.PostalCode
			</div>
			<div class="my-account-field">
				<b>Country: </b> @User.Country
			</div>
			<div class="my-account-field">
				<b>Phone: </b> @User.Phone
			</div>
			<div class="my-account-field">
				<b>Registration Date: </b> @User.RegistrationDate
			</div>
			<div class="my-account-field">
				<button class="btn btn-primary" @onclick="Open">Set User Information</button>
			</div>
			<div class="my-account-field">
				@if (!HaveAllTheInformation)
				{
					<div class="alert alert-warning" role="alert">
						Your user doesn't have all the required information for Register to an event.
					</div>
				}
			</div>
		</div>
	</div>
}

@* Modal Set Information *@
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Set user information</h5>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" required @bind="name" />
                </div>
	            <div class="mb-3">
		            <label for="secondName" class="form-label">Second name</label>
		            <input type="text" class="form-control" id="secondName" required @bind="secondName" />
	            </div>
	            <div class="mb-3">
		            <label for="phone" class="form-label">Phone</label>
		            <input type="text" class="form-control" id="phone" required @bind="phone" />
	            </div>
	            <div class="mb-3">
		            <label for="address" class="form-label">Address</label>
		            <input type="text" class="form-control" id="address" required @bind="address" />
	            </div>
	            <div class="mb-3">
		            <label for="city" class="form-label">City</label>
		            <input type="text" class="form-control" id="city" required @bind="city" />
	            </div>
	            <div class="mb-3">
		            <label for="country" class="form-label">Country</label>
		            <input type="text" class="form-control" id="country" required @bind="country" />
	            </div>
	            <div class="mb-3">
		            <label for="postalCode" class="form-label">Postal Code</label>
		            <input type="text"  class="form-control" id="postalCode" required @bind="postalCode" />
	            </div>
            </div>
            <div class="modal-footer">
                @if (!RequestingSetInformation)
                {
                    <button type="button" class="btn btn-primary" @onclick="SetInformation">Set</button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Setting...</span>
                    </button>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
            @if (isSet.HasValue)
            {
                @if (!isSet.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-danger" role="alert">	
                            Something went wrong
                        </div>
                    </div>
                }
                @if (isSet.Value)
                {
                    <div class="modal-footer">
                        <div class="alert alert-success" role="alert">
                            Information Set!
                        </div>
                    </div>
                }
            }
        </div>  
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
	
	private UserDto? User { get; set; }
	
	private string ModalClass = "";
	private string ModalDisplay = "none;";

	private bool HaveAllTheInformation;
	private bool? isSet;	
	private bool RequestingSetInformation;
	private bool ShowBackdrop;    
	
	private string address = "";
	private string name = "";
	private string secondName = "";
	private string city = "";
	private string country = "";
	private string postalCode = "";
	private string phone = "";

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
		var token = await customAuthStateProvider.GetToken();
	
		await GetMyUser(token);

		await base.OnInitializedAsync();
	}

	private async Task GetMyUser(string token)
	{
		User = await UsersService.GetMyUser(token);
		CheckAndSetHaveAllTheInformation();
	}

	private void CheckAndSetHaveAllTheInformation()
	{
		HaveAllTheInformation = false;
		if (!string.IsNullOrWhiteSpace(User.Name) && !string.IsNullOrWhiteSpace(User.SecondName) &&
		    !string.IsNullOrWhiteSpace(User.Address) && !string.IsNullOrWhiteSpace(User.City) &&
		    !string.IsNullOrWhiteSpace(User.Country) && !string.IsNullOrWhiteSpace(User.PostalCode) &&
		    !string.IsNullOrWhiteSpace(User.Phone))
		{
			HaveAllTheInformation = true;
		}

		address = User.Address;
		name = User.Name;
		secondName = User.SecondName;
		city = User.City;
		country = User.Country;
		postalCode = User.PostalCode;
		phone = User.Phone;
	}

	private async Task SetInformation()
	{
		RequestingSetInformation = true;
		
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
		var token = await customAuthStateProvider.GetToken();
		
		var isSetResponse = await UsersService.SetInformation(name, secondName, phone, address, city, country, postalCode, token);
		if (isSetResponse)
		{
			isSet = true;
			await GetMyUser(token);
			Close();
		}
		if (!isSetResponse)
		{
			isSet = false;
		}
		
		RequestingSetInformation = false;
	}
	
	private void Open()
	{
		ModalDisplay = "block;";    
		ModalClass = "Show";
		ShowBackdrop = true;
		StateHasChanged();
	}

	private void Close()
	{
		isSet = null;
		ModalDisplay = "none";
		ModalClass = "";
		ShowBackdrop = false;
		StateHasChanged();
	}
}