@page "/events"

@using SEM.App.Data
@using SEM.App.Components.Loadings
@using SEM.App.Authentication
@using System.Net.Http.Headers
@using System.Text.Json.Serialization

@inject EventsService EventsService
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Events</PageTitle>
 
<div class="events-page">
    <AuthorizeView>
        <div class="events-page-events">
            <div class="title">
                <h3>My registered events</h3>
            </div>
            @if (myRegisteredEvents == null)
            {
                <SimpleLoading></SimpleLoading>
            }
            else if (myRegisteredEvents.Count == 0)
            {
                <div class="alert alert-primary" role="alert">
                    You are not registered to any event.
                </div>
            }
            else if (myRegisteredEvents.Count > 0)
            {
                @foreach (var sportEvent in myRegisteredEvents)
                {
                    <div class="event" @onclick="() => GoToEvent(sportEvent!.Id)">
                        <div class="event-field">
                            <h3>@sportEvent.Name</h3>
                        </div>
                        <div class="event-field">
                            <b>Registrations: </b> @sportEvent.RegistrationsQuantity / @sportEvent.MaxRegistrations
                        </div>
                        <div class="event-field">
                            <b>Registration State: </b> @sportEvent.UserRegistrationState
                        </div>
                        <div class="event-field">
                            <b>Location: </b> @sportEvent.Location
                        </div>
                        <div class="event-field">
                            <b>Start: </b> @sportEvent.StartDate.ToLongDateString() at @sportEvent.StartDate.ToShortTimeString()
                        </div>
                    </div>
                }
            }
        </div>
    </AuthorizeView>

    <div class="events-page-events">
        <div class="title">
            <h3>All events</h3>
        </div>
        
            @if (sportEvents == null)
            {
                <SimpleLoading></SimpleLoading>
            }
            else
            {
                @foreach (var sportEvent in sportEvents)
                {
                    <div class="event" @onclick="() => GoToEvent(sportEvent!.Id)">
                        <div class="event-field">
                            <h3>@sportEvent.Name</h3>
                        </div>
                        <div class="event-field">
                            <b>Registrations: </b> @sportEvent.RegistrationsQuantity / @sportEvent.MaxRegistrations
                        </div>
                        <div class="event-field">
                            <b>Location: </b> @sportEvent.Location
                        </div>
                        <div class="event-field">
                            <b>Start: </b> @sportEvent.StartDate.ToLongDateString() at @sportEvent.StartDate.ToShortTimeString()
                        </div>
                    </div>
                }
            }
    </div>
</div>

@code {
    private List<SportEvent>? sportEvents;
    private List<MyRegisteredSportEvent>? myRegisteredEvents; 
    
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        
        sportEvents = await EventsService.GetEvents();

        if (!string.IsNullOrWhiteSpace(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, semApiUrl + $"Events/Registered");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        
            var response = await HttpClient.SendAsync(request);
            myRegisteredEvents = await response.Content.ReadFromJsonAsync<List<MyRegisteredSportEvent>>();
        }
    }

    public class MyRegisteredSportEvent
    {
        public Guid Id { get; set; }
        public string Name { get; set; }    
        public DateTime StartDate { get; set; }
        public int RegistrationsQuantity { get; set; }
        public string Location { get; set; }
        public int MaxRegistrations { get; set; }
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public RegistrationState UserRegistrationState { get; set; }
    }       

    private void GoToEvent(Guid eventId)
    {
        Navigation.NavigateTo($"/Event/{eventId}");
    }
}
    