@page "/manage-event/{EventId:guid}/Check-in/{RegistrationId:guid}"
@attribute [Authorize(Policy = "admin-organizer")]

@using SEM.App.Authentication
@using System.Net.Http.Headers
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient


<div class="main">
    <h3>Check-in</h3>
    
    @if (registration != null)
    {
        <div class="registration">
            <div class="registration-field">
                Registration Id: @registration.Id
            </div>
            <div class="registration-field">
                 Name: @registration.Name           
            </div>
            <div class="registration-field">
                Email: @registration.Email
            </div>
            <div class="registration-field">
                Second Name: @registration.SecondName            
            </div>
            <div class="registration-field">
                Checked In: @registration.CheckedIn            
            </div>
            @if (!registration.CheckedIn)
            {
                @if (!RequestingCheckIn)
                {
                    <button class="btn btn-outline-dark btn-sm" @onclick="CheckInRequest">Check In</button>
                }
                else
                {
                    <LoadingButton ButtonType="dark" LoadingText="Checking in"></LoadingButton>
                }
                
            }
        </div>
    }
    @if (registration == null && ErrorMessage == null)
    {
        <SimpleLoading></SimpleLoading>
    }
    @if (ErrorMessage != null)
    {
        <div class="alert alert-warning" role="alert">
            @ErrorMessage
        </div>
    }
</div>


@code {
    [Parameter]
    public Guid EventId { get; set; }
    [Parameter]
    public Guid RegistrationId { get; set; }

    private RegistrationCheckIn? registration;
        
    private string? Token;
    private string? ErrorMessage;
    private bool RequestingCheckIn;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        Token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(Token))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{RegistrationId}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
            var response = await HttpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Something went wrong while fetching the data, try again later.";
            }
            registration = await response.Content.ReadFromJsonAsync<RegistrationCheckIn>();
        }
    }

    private class RegistrationCheckIn
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string SecondName { get; set; }
        public string Email { get; set; }   
        public bool CheckedIn { get; set; }
    }

    private async Task CheckInRequest()
    {
        RequestingCheckIn = true;
        var request = new HttpRequestMessage(HttpMethod.Get, "https://sport-management-api.azurewebsites.net/api/" + $"Registrations/{RegistrationId}/check-in");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Token);
        var response = await HttpClient.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = "Something went wrong while fetching the data, try again later.";
        }
        
        RequestingCheckIn = false;
    }

}
