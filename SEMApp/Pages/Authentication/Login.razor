@page "/login"
@using Microsoft.AspNetCore.Components
@using SEM.App.Authentication
@using System.Net

@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="login-page">
    <div class="login">
        <div class="login-content">
            <div class="register-field text-center">
                <h3>LOGIN</h3>
            </div>
            <div class="login-field">
                <label>Email</label>
                <input @bind="loginRequest.Email" class="form-control" placeholder="Email" />
            </div>
            <div class="login-field">
                <label>Password</label>
                <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
            </div>
            <div class="login-field">
                @if (!requestingLogIn)
                {
                    <button @onclick="Authenticate" class="btn btn-primary btn-sm">Login</button>
                }
                else
                {
                    <button class="btn btn-success" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Signing up...</span>
                    </button>
                }
            </div>
            <div class="login-field">
            @if (FailedLoginMessage!= null)
            {
                <div class="event-field alert alert-danger">
                    @FailedLoginMessage
                </div>
            }
            </div>
        </div>
    </div>
</div>


@code {
    private LoginRequest loginRequest = new();
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";
    
    private string? FailedLoginMessage;

    private bool requestingLogIn;

    private async Task Authenticate()
    {
        FailedLoginMessage = null;
        requestingLogIn = true;
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>(semApiUrl + "Auth/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true);
        }
        else if(loginResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            FailedLoginMessage = "Login Failed, verify your credentials please.";
            requestingLogIn = false;
        }
        else
        {
            FailedLoginMessage = "Something went wrong with our services, try again later please.";
            requestingLogIn = false;
        }
    }

    public class LoginRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

