@page "/login"
@using Microsoft.AspNetCore.Components
@using SEM.App.Authentication
@using SEM.App.Components.Loadings
@using System.Net

@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="login-page">
    <div class="login">
        <div class="login-content">
            <div class="register-field text-center">
                <h3>LOGIN</h3>
            </div>
            <div class="login-field">
                <label>Email</label>
                <input @bind="loginRequest.Email" class="form-control" placeholder="Email" />
            </div>
            <div class="login-field">
                <label>Password</label>
                <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
            </div>
            <div class="login-field">
                @if (!requestingLogIn)
                {
                    <button @onclick="Authenticate" class="btn btn-outline-dark btn-sm">Login</button>
                }
                else
                {
                    <LoadingButton ButtonType="dark" LoadingText="Signing up" />
                }
            </div>
            <div class="login-field">
                @if (FailedLoginMessage!= null)
                {
                    <div class="event-field alert alert-danger">
                        @FailedLoginMessage
                    </div>
                }
            </div>
            @if (!showChangePassword)
            {
                <div class="login-field">
                    <button @onclick="() => ShowChangePassword(true)" class="btn btn-outline-dark btn-sm">Change password</button>
                </div>
            }
            @if (showChangePassword)
            {
                <div class="login-field">
                    <label>Change password</label>
                    <input @bind="changePasswordEmail" type="text" class="form-control" placeholder="Email" />
                </div>
                <div class="login-field">
                    @if (!RequestingChangePassword)
                    {
                        <button @onclick="RequestChangePassword" class="btn btn-outline-dark btn-sm">Change password</button>
                        <button @onclick="() => ShowChangePassword(false)" class="btn btn-outline-dark btn-sm">Hide</button>
                    }
                    else
                    {
                        <LoadingButton ButtonType="dark" LoadingText="Requesting"></LoadingButton>
                    }
                </div>
                <div class="login-field">
                    @if (sendedEmailToChangePasswordMessage != null)
                    {
                        <div class="alert alert-success" role="alert">
                            @sendedEmailToChangePasswordMessage
                        </div>
                    }
                    @if (errorSendedEmailToChangePasswordMessage != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorSendedEmailToChangePasswordMessage
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>


@code {
    private LoginRequest loginRequest = new();
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";
    
    private string? FailedLoginMessage;
    private string? changePasswordEmail;
    private string? sendedEmailToChangePasswordMessage;
    private string? errorSendedEmailToChangePasswordMessage;

    private bool requestingLogIn;
    private bool RequestingChangePassword;
    private bool showChangePassword;

    private async Task Authenticate()
    {
        FailedLoginMessage = null;
        requestingLogIn = true;
        var loginResponse = await httpClient.PostAsJsonAsync(semApiUrl + "Auth/Login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true);
        }
        else if(loginResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            FailedLoginMessage = "Login Failed, verify your credentials please.";
            requestingLogIn = false;
        }
        else
        {
            FailedLoginMessage = "Something went wrong with our services, try again later please.";
            requestingLogIn = false;
        }   
    }
    
    private async Task RequestChangePassword()
    {
        RequestingChangePassword = true;
        sendedEmailToChangePasswordMessage = null;
        errorSendedEmailToChangePasswordMessage = null;
        var response = await httpClient.PostAsJsonAsync(semApiUrl + "Auth/change-password-request", changePasswordEmail);

        if (response.IsSuccessStatusCode)
        {
            sendedEmailToChangePasswordMessage = "If this account exist, you have an email.";
        }
        else
        {
            errorSendedEmailToChangePasswordMessage = "Our servers are not available right now, try it again later please.";
        }
        RequestingChangePassword = false;
    }

    public class LoginRequest
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    private void ShowChangePassword(bool show)
    {
        sendedEmailToChangePasswordMessage = null;
        errorSendedEmailToChangePasswordMessage = null;
        showChangePassword = show;
    }

}
    
    