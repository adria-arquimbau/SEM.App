@page "/Register"
@using System.Net

@inject HttpClient httpClient
@inject NavigationManager navManager

<div class="register-page">
    <div class="register">
        <div class="register-content">
            <div class="register-field text-center">
                <h3>REGISTER</h3>
            </div>
            <div class="register-field">
                <label>User name</label>
                <input @bind="registerRequest.UserName" type="text" class="form-control" placeholder="UserName"/>
            </div>
            <div class="register-field">
                <label>Email</label>
                <input @bind="registerRequest.Email" class="form-control" placeholder="Email"/>
            </div>
            <div class="register-field">
                <label>Password / Must have: upper case / lower case / one symbol / one number / min 6 characters</label>
                <input @bind="registerRequest.Password" type="password" class="form-control" placeholder="Password"/>
            </div>
            <div class="register-field">
                <label>Repeat password</label>
                <input @bind="repeatPassword" type="password" class="form-control" placeholder="RepeatPassword"/>
            </div>
            <div class="register-field">
                @if (!RequestingRegister && SuccessMessage == null)
                {
                    <button @onclick="Registration" class="btn btn-primary">Register</button>
                }
                @if (RequestingRegister)
                {
                    <button class="btn btn-success" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Registering..</span>
                    </button>
                }
            </div>
            <div class="register-field">
                @if (FailedRegisterMessage != null)
                {
                    <div class="event-field alert alert-danger">
                        @FailedRegisterMessage
                        @if (RegisterErrorsList.Count != 0)
                        {
                            <ul>
                                @foreach (var error in RegisterErrorsList)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        }
                    </div>
                }
                @if (SuccessMessage != null)
                {
                    <div class="alert alert-warning" role="alert">
                        @SuccessMessage
                    </div>
                    <div class="event-field">
                        <button class="btn btn-primary" @onclick="GoToLogIn">Go to log in</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private const string semApiUrl = "https://sport-management-api.azurewebsites.net/api/";

    private string repeatPassword = string.Empty;
    private string? FailedRegisterMessage;
    private List<string> RegisterErrorsList = new();
    private string? SuccessMessage;  
        
    private bool RequestingRegister;

    private async Task Registration()
    {
        FailedRegisterMessage = null;
        RegisterErrorsList = new List<string>();
        if (!RegisterValidations()) return;
        RequestingRegister = true;
        var loginResponse = await httpClient.PostAsJsonAsync(semApiUrl + "Auth/Register", registerRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            SuccessMessage = "You have an email. Confirm your account and Log in!";
        }
        else if(loginResponse.StatusCode == HttpStatusCode.BadRequest)
        {
            var responseContent = await loginResponse.Content.ReadFromJsonAsync<RegisterErrorResponse>();
            FailedRegisterMessage = responseContent?.Message;
            if (responseContent?.Errors?.DuplicateEmail != null) RegisterErrorsList.Add("This email already exists");
            if (responseContent?.Errors?.DuplicateUserName != null) RegisterErrorsList.Add("This user name already exists");
            if (responseContent?.Errors?.PasswordRequiresDigit != null) RegisterErrorsList.Add("Passwords must have at least one digit ('0'-'9').");
            if (responseContent?.Errors?.PasswordRequiresNonAlphanumeric != null) RegisterErrorsList.Add("Passwords must have at least one non alphanumeric character.");
            if (responseContent?.Errors?.PasswordRequiresUpper != null) RegisterErrorsList.Add("Passwords must have at least one uppercase ('A'-'Z').");
            if (responseContent?.Errors?.PasswordTooShort != null) RegisterErrorsList.Add("Passwords must be at least 6 characters");
            if (responseContent?.Errors?.PasswordRequiresLower != null) RegisterErrorsList.Add("Passwords must have at least one lowercase ('a'-'z').");
        }
        else
        {   
            RequestingRegister = false;
            FailedRegisterMessage = "Something went wrong with our servers, try it again later";
            //ALERT
        }
        RequestingRegister = false;
    }

    private void GoToLogIn()
    {
        navManager.NavigateTo($"/login");
    }

    private bool RegisterValidations()
    {
        if (string.IsNullOrWhiteSpace(registerRequest.Email) || string.IsNullOrWhiteSpace(registerRequest.UserName) 
            || string.IsNullOrWhiteSpace(registerRequest.Password) || string.IsNullOrWhiteSpace(repeatPassword))
        {
            FailedRegisterMessage = "You must fill all the fields";
            return false;
        }
        
        if (repeatPassword != registerRequest.Password)
        {
            FailedRegisterMessage = "Not equal passwords. Password and Repeat password must be identical";
            return false;
        }

        return true;
    }

    public class RegisterRequest    
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
        public string? UserName { get; set; }
    }
    
    private class RegisterErrorResponse
    {
        public string?  Message => null;
        public RegisterErrors?  Errors => null;
    }   
    
    private class RegisterErrors
    {
        public DuplicateEmail?  DuplicateEmail => null;
        public DuplicateUserName?  DuplicateUserName => null;
        public PasswordRequiresDigit? PasswordRequiresDigit => null;
        public PasswordRequiresNonAlphanumeric?  PasswordRequiresNonAlphanumeric => null;
        public PasswordRequiresUpper?  PasswordRequiresUpper => null;
        public PasswordRequiresLower?  PasswordRequiresLower => null;
        public PasswordTooShort?  PasswordTooShort => null; 
    }
    
    private class DuplicateEmail{}   
    private class DuplicateUserName{}
    private class PasswordRequiresDigit{}
    private class PasswordRequiresNonAlphanumeric{}
    private class PasswordRequiresUpper{}
    private class PasswordRequiresLower{}
    private class PasswordTooShort{}
}

