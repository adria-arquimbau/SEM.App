@page "/ChangePassword"

@using System.Net

@inject HttpClient httpClient

<div class="changePassword-page">
    <div class="changePassword">
        <div class="changePassword-content">
            <div class="changePassword-field">
                <h3>Change password</h3>
            </div>
            <div class="changePassword-field">
                <label>New password</label>
                <input @bind="newPassword" class="form-control" placeholder="new password" />
            </div>
            <div class="changePassword-field">
                <label>Repeat new password</label>
                <input @bind="repeatNewPassword" class="form-control" placeholder="repeat new password" />
            </div>
            <div class="changePassword-field">
                @if (!RequestingChangePassword && successChangedPasswordMessage == null)
                {
                    <button @onclick="ChangePasswordRequest" class="btn btn-outline-dark btn-sm">Change password</button>
                }
                @if (RequestingChangePassword)
                {
                    <LoadingButton ButtonType="dark" LoadingText="Changing" />
                }
                @if (successChangedPasswordMessage != null)
                {
                    <div class="changePassword-field">
                        <div class="event-field alert alert-success">
                            @successChangedPasswordMessage
                        </div>
                    </div>
                }
                @if (errorMessage != null)
                {
                    <div class="changePassword-field">
                        <div class="event-field alert alert-danger">
                            @errorMessage
                            @if (ChangePasswordErrorsList.Count != 0)
                            {
                                <ul>
                                    @foreach (var error in ChangePasswordErrorsList)
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] 
    [SupplyParameterFromQuery]
    public string? Email { get; set; }    
    [Parameter] 
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    private string? newPassword { get; set; }
    private string? repeatNewPassword { get; set; }
    private string? successChangedPasswordMessage { get; set; }
    private string? errorMessage { get; set; }
    private List<string> ChangePasswordErrorsList = new();
    
    private bool RequestingChangePassword { get; set; }

    private async Task ChangePasswordRequest()
    {
        RequestingChangePassword = true;
        errorMessage = null;
        ChangePasswordErrorsList = new List<string>();
        if (!RegisterValidations()) return;
        
        var response = await httpClient.PostAsJsonAsync(ApiService.GetBaseUrl() + "Auth/change-password", new
        {
            NewPassword = newPassword,
            Token,
            Email
        });

        if (response.IsSuccessStatusCode)
        {
            successChangedPasswordMessage = "Your password was changed";
        }       
        else if(response.StatusCode == HttpStatusCode.BadRequest)
        {   
            var responseContent = await response.Content.ReadFromJsonAsync<ChangePasswordErrorResponse>();
            errorMessage = responseContent?.Message;
            if (responseContent?.Errors?.PasswordRequiresDigit != null) ChangePasswordErrorsList.Add("Passwords must have at least one digit ('0'-'9').");
            if (responseContent?.Errors?.PasswordRequiresNonAlphanumeric != null) ChangePasswordErrorsList.Add("Passwords must have at least one non alphanumeric character.");
            if (responseContent?.Errors?.PasswordRequiresUpper != null) ChangePasswordErrorsList.Add("Passwords must have at least one uppercase ('A'-'Z').");
            if (responseContent?.Errors?.PasswordTooShort != null) ChangePasswordErrorsList.Add("Passwords must be at least 6 characters");
            if (responseContent?.Errors?.PasswordRequiresLower != null) ChangePasswordErrorsList.Add("Passwords must have at least one lowercase ('a'-'z').");
        }
        else
        {
            errorMessage = "Something went wrong with our servers, try it again later";
        }

        RequestingChangePassword = false;
    }
    
    private bool RegisterValidations()
    {
        if (string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(repeatNewPassword))
        {
            errorMessage = "You must fill all the fields";
            RequestingChangePassword = false;
            return false;
        }
        
        if (newPassword != repeatNewPassword)
        {
            errorMessage = "Not equal passwords. New password and repeat password must be identical";
            RequestingChangePassword = false;
            return false;
        }

        return true;
    }
    
    private class ChangePasswordErrorResponse
    {
        public string?  Message { get; set; }
        public ChangePasswordErrors?  Errors { get; set; }
    }   
    
    private class ChangePasswordErrors
    {
        public PasswordRequiresDigit? PasswordRequiresDigit { get; set; }
        public PasswordRequiresNonAlphanumeric?  PasswordRequiresNonAlphanumeric { get; set; }
        public PasswordRequiresUpper?  PasswordRequiresUpper { get; set; }
        public PasswordRequiresLower?  PasswordRequiresLower { get; set; }
        public PasswordTooShort?  PasswordTooShort { get; set; }
    }
    
    private class PasswordRequiresDigit{}
    private class PasswordRequiresNonAlphanumeric{}
    private class PasswordRequiresUpper{}
    private class PasswordRequiresLower{}
    private class PasswordTooShort{}
}